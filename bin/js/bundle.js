var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MtGameConfig_1 = require("./MtGameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(MtGameConfig_1.default.width, MtGameConfig_1.default.height);
        else
            Laya.init(MtGameConfig_1.default.width, MtGameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = MtGameConfig_1.default.scaleMode;
        Laya.stage.screenMode = MtGameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = MtGameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (MtGameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (MtGameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (MtGameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        MtGameConfig_1.default.startScene && Laya.Scene.open(MtGameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./MtGameConfig":2}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "full";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "portal/Loading.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameUI":19}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ResManager_1 = require("../Resource/ResManager");
var GameManager_1 = require("../GameManager");
var Common_1 = require("../Common/Common");
var NameConfig_1 = require("../Configure/NameConfig");
var EventManager_1 = require("../Events/EventManager");
var Events_1 = require("../Events/Events");
var LabelUpdate_1 = require("../Component/LabelUpdate");
/**
 * BIM管理类，用于加载、初始化模型；模型打包格式为.lh文件，以层为单位
 * 颜色记录也在此
 */
var BIMManager = /** @class */ (function () {
    function BIMManager() {
        this.m_3dlabelDisappearDistance = 80;
        this.m_3dlabelTotalDisappearDistance = 180;
        this.m_2dlabelDisappearDistance = 100;
        this.m_2dlabelTotalDisappearDistance = 180;
        this.m_defaultFloorColor = "#DC143C";
        /**
         * ************************************************暂时先将设置颜色的方法放到BIM内********************************
         */
        /**
        * 记录设置颜色后的材质球；
        */
        this.MaterialsDic = new Laya.WeakObject();
        this.m_spaceDic = new Laya.WeakObject();
        this.m_levelSpsceDic = new Laya.WeakObject();
        this.m_levelRes = new Laya.WeakObject();
        this.Levels = new Array();
        this.m_levelAllMeshSprite3Ds = new Laya.WeakObject();
        this.AddEvents();
    }
    BIMManager.prototype.AddEvents = function () {
        var _this = this;
        EventManager_1.default.Instance().AddEventListener(Events_1.Events.OnCameraDistanceChanged.toString(), this, this.ShowHideTagsByDistance);
        EventManager_1.default.Instance().AddEventListener(Events_1.Events.OnDepTreeItemClicked.toString(), this, this.SetOneLevelFloorColor);
        var isReset = true;
        //TEMP:
        Laya.stage.on(Laya.Event.KEY_DOWN, this, function (e) {
            if (e.keyCode == Laya.Keyboard.SPACE) {
                isReset = !isReset;
                if (isReset) {
                    _this.SetOneFloorOpacity(1);
                }
                else {
                    _this.SetOneFloorOpacity(0.2);
                }
            }
        });
    };
    /**
     * 加载所有楼层资源，并初始化楼板，默认隐藏，GameManager中开启默认层
     * 回调函数若需要执行多次，则需要将once置为false
     * @param resUrl
     * @param onComplete
     */
    BIMManager.prototype.LoadRes = function (resUrl, onComplete) {
        var _this = this;
        if (resUrl == null || resUrl.length == 0)
            return;
        var index = 0;
        ResManager_1.default.Instance().LoadPrefabAssets(resUrl, Laya.Handler.create(this, function (url, res) {
            //初始化3D场景，初始化一次
            GameManager_1.default.Instance().Init3DScene();
            //将资源加入场景
            GameManager_1.default.Instance().MainScene.addChild(res);
            //获得所有楼层
            var level = Common_1.default.ParseLoadLevel(url);
            _this.Levels.push(level);
            //遍历所有资源
            _this.TravelMeshSprite3D(res, level);
            //资源默认隐藏
            res.active = false;
            //记录当前楼层资源
            if (!_this.m_levelRes.has(level)) {
                _this.m_levelRes.set(level, res);
            }
            index++;
            if (index == resUrl.length) {
                //设置默认的楼层为第一个
                _this.CurrenLevel = _this.Levels[0];
                onComplete.apply();
            }
        }, null, false));
    };
    /**
     * 刷新当前显示楼层Tags的内容，通过标签类型LabelType来改变;
     * @param type 标签类型
     */
    BIMManager.prototype.RefreshLabelContent = function (type) {
        var _this = this;
        if (this.CurrenLevel == null ||
            this.m_levelSpsceDic == null ||
            this.m_spaceDic == null)
            return;
        if (this.m_levelSpsceDic.has(this.CurrenLevel)) {
            this.m_levelSpsceDic.get(this.CurrenLevel).forEach(function (element) {
                if (_this.m_spaceDic.has(element)) {
                    var floor = _this.m_spaceDic.get(element);
                    if (floor == null)
                        return;
                    switch (type) {
                        case LabelType.Depart:
                            floor.label.text = floor.Organiaztion;
                            _this.SetHexColor(floor.Object, floor.organizationColor);
                            break;
                        case LabelType.Area:
                            floor.label.text = floor.area;
                            break;
                        case LabelType.Usage:
                            floor.label.text = floor.usage;
                            _this.SetHexColor(floor.Object, floor.usageColor);
                            break;
                    }
                }
            });
        }
    };
    /**
     *
     * @param b 显示或隐藏全部楼层，显示全部楼层时，要关掉tags
     */
    BIMManager.prototype.ShowAllLevels = function (b) {
        var _this = this;
        if (this.Levels == null || this.Levels.length == 0)
            return;
        this.Levels.forEach(function (element) {
            if (b) {
                _this.ShowOneLevelFloors(element, true);
            }
            else {
                _this.HideOneLevelFloors(element);
            }
        });
    };
    /**
     * 显示隐藏楼层及楼层Tag
     * @param level 楼层
     * @param b 显/隐
     */
    BIMManager.prototype.ShowOneLevelFloors = function (level, isShowAll) {
        var _this = this;
        if (level == null)
            return;
        //开启levelRoot
        if (this.m_levelRes.has(level)) {
            var res = this.m_levelRes.get(level);
            res.active = true;
        }
        if (this.m_levelSpsceDic.has(level)) {
            this.m_levelSpsceDic.get(level).forEach(function (element) {
                if (_this.m_spaceDic.has(element)) {
                    var floorItem = _this.m_spaceDic.get(element);
                    if (floorItem != null && floorItem.label != null) {
                        if (isShowAll) {
                            floorItem.label.visible = false;
                        }
                        else {
                            floorItem.label.visible = true;
                        }
                    }
                }
            });
        }
        this.CurrenLevel = level;
    };
    BIMManager.prototype.HideOneLevelFloors = function (level) {
        var _this = this;
        if (level == null)
            return;
        //开启levelRoot
        if (this.m_levelRes.has(level)) {
            var res = this.m_levelRes.get(level);
            res.active = false;
        }
        if (this.m_levelSpsceDic.has(level)) {
            this.m_levelSpsceDic.get(level).forEach(function (element) {
                if (_this.m_spaceDic.has(element)) {
                    var floorItem = _this.m_spaceDic.get(element);
                    if (floorItem != null) {
                        if (floorItem.label != null) {
                            floorItem.label.visible = false;
                        }
                    }
                }
            });
        }
    };
    /**
     * 通过Code获取一个FloorItem
     * @param code
     */
    BIMManager.prototype.GetOneFloorItem = function (code) {
        if (code == null)
            return null;
        if (this.m_spaceDic.has(code)) {
            return this.m_spaceDic.get(code);
        }
        else {
            return null;
        }
    };
    BIMManager.prototype.GetOneFloorSprite3D = function (code) {
        if (code == null)
            return null;
        if (this.m_spaceDic.has(code)) {
            var floor = this.m_spaceDic.get(code);
            return floor.Object;
        }
        else {
            return null;
        }
    };
    BIMManager.prototype.TravelMeshSprite3D = function (parent, level) {
        if (parent == null)
            return;
        for (var i = 0; i < parent._children.length; i++) {
            var meshSprite3D = parent.getChildAt(i);
            if (meshSprite3D != null) {
                if (meshSprite3D.meshFilter != null) {
                    if (meshSprite3D.parent.name == NameConfig_1.default.floor)
                        this.InstantiateFloorItem(meshSprite3D);
                    if (!this.m_levelAllMeshSprite3Ds.has(level)) {
                        this.m_levelAllMeshSprite3Ds.set(level, new Array());
                    }
                    this.m_levelAllMeshSprite3Ds.get(level).push(meshSprite3D);
                }
                else {
                    this.TravelMeshSprite3D(meshSprite3D, level);
                }
            }
        }
    };
    /**
     * 对象化Floor
     * @param floor
     */
    BIMManager.prototype.InstantiateFloorItem = function (floor) {
        if (floor == null)
            return;
        var meshName = floor.name;
        var data = GameManager_1.default.Instance().Data.GetOneSpaceData(meshName);
        if (data != null) {
            var floorItem = this.CreateFloorItem(floor, data);
            if (!this.m_spaceDic.has(meshName)) {
                this.m_spaceDic.set(meshName, floorItem);
            }
            //记录当前层所有的楼板
            if (!this.m_levelSpsceDic.has(data.levelCode)) {
                this.m_levelSpsceDic.set(data.levelCode, new Array());
            }
            var arr = this.m_levelSpsceDic.get(data.levelCode);
            arr.push(meshName);
        }
        else {
            console.log("DB not contain this {0} floor", meshName);
        }
    };
    BIMManager.prototype.CreateFloorItem = function (floor, data) {
        if (floor == null || data == null)
            return;
        var item = new FloorItem();
        item.Object = floor;
        item.Transform = floor.transform;
        item.Organiaztion = GameManager_1.default.Instance().Data.GetOneOrganizationName(data.organizationCode, "2");
        item.organizationColor = GameManager_1.default.Instance().Data.GetOneOrganizationColor(data.organizationCode);
        item.usage = GameManager_1.default.Instance().Data.GetOneUsageName(data.usageTypeCode);
        item.usageColor = GameManager_1.default.Instance().Data.GetOneUsageColor(data.usageTypeCode);
        item.area = data.useArea;
        //TEMP:默认显示用途
        item.label = this.CreateOneFloorTag(GameManager_1.default.Instance().Camera.Camera, floor, item.usage);
        this.SetHexColor(floor, item.usageColor);
        //默认Tag隐藏
        item.label.visible = false;
        return item;
    };
    BIMManager.prototype.CreateOneFloorTag = function (camera, floor, content) {
        var label = new Laya.Label();
        label.addComponent(LabelUpdate_1.default);
        Laya.stage.addChild(label);
        var component = label.getComponent(LabelUpdate_1.default);
        component.Init(floor, camera, content);
        return label;
    };
    /**
     * 根据摄像机的到原点的距离显示或隐藏Label
     */
    BIMManager.prototype.ShowHideTagsByDistance = function (distance) {
        var _this = this;
        var startdisappeardis = 0;
        var totaldisappeardis = 0;
        if (GameManager_1.default.Instance().Camera.Is2D) {
            startdisappeardis = this.m_2dlabelDisappearDistance;
            totaldisappeardis = this.m_2dlabelTotalDisappearDistance;
        }
        else {
            startdisappeardis = this.m_3dlabelDisappearDistance;
            totaldisappeardis = this.m_3dlabelTotalDisappearDistance;
        }
        if (distance > startdisappeardis) {
            var floors_1 = this.m_levelSpsceDic.get(this.CurrenLevel);
            var count = floors_1.length;
            var interval = (totaldisappeardis - startdisappeardis) / count;
            var pointer_1 = (distance - startdisappeardis) / interval;
            floors_1.forEach(function (element) {
                var index = floors_1.indexOf(element);
                var floor = _this.m_spaceDic.get(element);
                if (floor != null) {
                    if (index <= pointer_1) {
                        floor.label.visible = false;
                    }
                    else {
                        floor.label.visible = true;
                    }
                }
            });
        }
    };
    BIMManager.prototype.SetOneLevelFloorColor = function (orgs, b) {
        var _this = this;
        if (orgs.length == 0)
            return;
        var floors = GameManager_1.default.Instance().Data.GetOneLevelFloorsByOrgs(this.CurrenLevel, orgs);
        if (floors == null || floors.length == 0)
            return;
        floors.forEach(function (element) {
            var floor = _this.m_spaceDic.get(element);
            if (floor == null)
                return;
            if (b) {
                switch (GameManager_1.default.Instance().MainUI.CurrentLabelType) {
                    case LabelType.Depart:
                        _this.SetHexColor(floor.Object, floor.organizationColor);
                        break;
                    case LabelType.Usage:
                        _this.SetHexColor(floor.Object, floor.usageColor);
                        break;
                }
            }
            else {
                _this.SetHexColor(floor.Object, _this.m_defaultFloorColor);
            }
        });
    };
    BIMManager.prototype.SetOneFloorOpacity = function (value, level) {
        level = level == null ? this.CurrenLevel : level;
        if (!this.m_levelAllMeshSprite3Ds.has(level))
            return;
        var meshes = this.m_levelAllMeshSprite3Ds.get(level);
        meshes.forEach(function (element) {
            Common_1.default.SetOpacity(element, value);
        });
    };
    /**
     * 设置对象颜色
     * @param target
     * @param color Laya内部的Color
     */
    BIMManager.prototype.SetLayaColor = function (target, color) {
        var _this = this;
        if (target == null || color == null)
            return;
        var mats = target.meshRenderer.materials;
        if (mats == null)
            return;
        mats.forEach(function (element) {
            _this.SetColor(element, new Laya.Vector4(color.r, color.g, color.b, color.a));
        });
    };
    /**
     * 设置对象的颜色
     * @param target 对象
     * @param hexColor 十六进制颜色
     */
    BIMManager.prototype.SetHexColor = function (target, hexColor) {
        var _this = this;
        if (target == null || hexColor == null)
            return;
        var mats = target.meshRenderer.materials;
        if (mats == null)
            return;
        var color = this.ConvertColor(hexColor);
        mats.forEach(function (element) {
            _this.SetColor(element, color);
        });
    };
    BIMManager.prototype.SetColor = function (mat, color) {
        if (mat == null || color == null)
            return;
        mat.albedoColor = color;
        if (!this.MaterialsDic.has(mat)) {
            this.MaterialsDic.set(mat, color);
        }
    };
    /**
     * 颜色转换，将hexColor转换成Vector4
     * @param hexColor
     */
    BIMManager.prototype.ConvertColor = function (hexColor) {
        try {
            var count = hexColor.length;
            var r = parseInt(hexColor.substr(0, 2), 16);
            var g = parseInt(hexColor.substr(2, 2), 16);
            var b = parseInt(hexColor.substr(4, 2), 16);
            var a = 255;
            if (count == 8)
                a = parseInt(hexColor.substr(6, 2), 16);
            return this.Convert(r, g, b, a);
        }
        catch (error) {
            console.debug("<color=yellow>{0}</color>", "十六进制颜色值格式错误,需输入6位或8位(带alpha)16进制值,如:0091EAFF,不加#或0x");
        }
        return new Laya.Vector4(1, 1, 1, 1);
    };
    BIMManager.prototype.Convert = function (r, g, b, a) {
        return new Laya.Vector4(r / 255, g / 255, b / 255, a / 255);
    };
    BIMManager.prototype.ResetColor = function (floor) {
        var _this = this;
        if (floor == null || floor.meshRenderer == null)
            return;
        var mats = floor.meshRenderer.materials;
        if (mats != null) {
            mats.forEach(function (element) {
                if (_this.MaterialsDic.has(element)) {
                    var mat = element;
                    mat.albedoColor = _this.MaterialsDic.get(element);
                }
            });
        }
    };
    return BIMManager;
}());
exports.default = BIMManager;
var LabelType;
(function (LabelType) {
    LabelType[LabelType["Depart"] = 0] = "Depart";
    LabelType[LabelType["Usage"] = 1] = "Usage";
    LabelType[LabelType["Area"] = 2] = "Area";
})(LabelType = exports.LabelType || (exports.LabelType = {}));
var FloorItem = /** @class */ (function () {
    function FloorItem() {
    }
    return FloorItem;
}());
},{"../Common/Common":5,"../Component/LabelUpdate":8,"../Configure/NameConfig":11,"../Events/EventManager":16,"../Events/Events":17,"../GameManager":18,"../Resource/ResManager":23}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector3 = Laya.Vector3;
var GameManager_1 = require("../GameManager");
var EventManager_1 = require("../Events/EventManager");
var Events_1 = require("../Events/Events");
var CameraMoveScript_1 = require("../Component/CameraMoveScript");
var RaySelector_1 = require("../Component/RaySelector");
var LightControl_1 = require("../Component/LightControl");
var MtTween_1 = require("../Common/MtTween");
var CameraManager = /** @class */ (function () {
    function CameraManager() {
        this._3dPos = new Vector3(-6, 45, 17);
        this._3dRot = new Vector3(-78, 0, 0);
        this._2dPos = new Vector3(-5, 50, 17);
        this._2dRot = new Vector3(-90, 0, 0);
        this._oriOrthSize = 70;
    }
    CameraManager.prototype.InitCamera = function () {
        var camera = new Laya.Camera();
        camera.transform.position = this._3dPos;
        camera.transform.localRotationEuler = this._3dRot;
        camera.clearColor = new Laya.Vector4(0, 0, 0, 0);
        this.Camera = camera;
        //摄像机控制
        camera.addComponent(CameraMoveScript_1.default);
        var camctrl = camera.getComponent(CameraMoveScript_1.default);
        camctrl.m_scene3d = GameManager_1.default.Instance().MainScene;
        //射线检测
        camera.addComponent(RaySelector_1.default);
        var rayselector = camera.getComponent(RaySelector_1.default);
        rayselector.Scene3D = GameManager_1.default.Instance().MainScene;
        GameManager_1.default.Instance().MainScene.addChild(camera);
        this.InitLight();
    };
    CameraManager.prototype.InitLight = function () {
        var directionLight = new Laya.DirectionLight();
        GameManager_1.default.Instance().MainScene.addChild(directionLight);
        directionLight.color = new Laya.Vector3(0.2, 0.2, 0.2);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        directionLight.transform.position = this.Camera.transform.position;
        directionLight.transform.rotation = this.Camera.transform.rotation;
        directionLight.addComponent(LightControl_1.default);
        var lightcontrl = directionLight.getComponent(LightControl_1.default);
        lightcontrl.Camera = this.Camera;
    };
    CameraManager.prototype.ResetCamera = function (is2D) {
        var _this = this;
        this.Is2D = is2D;
        var component = this.Camera.getComponent(CameraMoveScript_1.default);
        if (is2D) {
            MtTween_1.default.Rotate(this.Camera, this._2dRot, 100);
            MtTween_1.default.Move(this.Camera, this._2dPos, 100, null, Laya.Handler.create(this, function () {
                _this.Camera.orthographic = true;
                _this.Camera.orthographicVerticalSize = 60;
                component.Is2D = true;
            }));
        }
        else {
            MtTween_1.default.Rotate(this.Camera, this._3dRot, 100);
            MtTween_1.default.Move(this.Camera, this._3dPos, 100, null, Laya.Handler.create(this, function () {
                _this.Camera.orthographic = false;
                component.Is2D = false;
            }));
        }
    };
    CameraManager.prototype.CameraMove = function (object, fromPos, toPos) {
    };
    CameraManager.prototype.CameraRotate = function (fromRotate, toRotate) {
    };
    CameraManager.prototype.AddEvent = function () {
        EventManager_1.default.Instance().AddEventListener(Events_1.Events.OnUI_LevelBtn_Clicked.toString(), this, this.CameraMoveInLevel);
    };
    CameraManager.prototype.CameraMoveInLevel = function (levelName) {
    };
    return CameraManager;
}());
exports.default = CameraManager;
},{"../Common/MtTween":6,"../Component/CameraMoveScript":7,"../Component/LightControl":9,"../Component/RaySelector":10,"../Events/EventManager":16,"../Events/Events":17,"../GameManager":18}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MtTween_1 = require("./MtTween");
var Common = /** @class */ (function () {
    function Common() {
    }
    Common.SetOpacity = function (target, value, duration) {
        if (target == null)
            return;
        duration = duration == null ? 100 : duration;
        //MtTween.Alpha(target,value,duration);
        MtTween_1.default.MultiAlpha(target, value, duration);
    };
    /**
     * 通过楼板Code获得LevelCode
     * @param code
     */
    Common.GetLevelByFloorCode = function (code) {
        if (code == null)
            return null;
        var names = code.split("-");
        if (names.length < 3) {
            return null;
        }
        else {
            return code.substring(0, 15);
        }
    };
    /**
     * 通过楼板Code获得BuildingCode
     * @param code
     */
    Common.GetBuildingByFloorCode = function (code) {
        if (code == null)
            return null;
        var names = code.split("-");
        if (names.length < 3) {
            return null;
        }
        else {
            return code.substring(0, 10);
        }
    };
    /**
     * 通过加载的资源，获取当前资源的所在的楼层
     * @param url .lh资源的url路径，.lh文件的命名规则必须为楼层的Code
     */
    Common.ParseLoadLevel = function (url) {
        if (url == null)
            return null;
        var temp = url.substr(url.lastIndexOf("/") + 1);
        var level = temp.substr(0, temp.indexOf("."));
        return level;
    };
    /**
     * 返回前端显示的LevelCode;例如F1
     * @param levelCode 楼层编码：BDHCMU-A02-F001
     */
    Common.GetPurLevel = function (levelCode) {
        if (levelCode == null || levelCode.match("-") == null)
            return null;
        var eles = levelCode.split("-");
        if (eles.length < 3)
            return null;
        return eles[2];
    };
    return Common;
}());
exports.default = Common;
},{"./MtTween":6}],6:[function(require,module,exports){
"use strict";
/**
 * ~封装Laya.Tween，用于适应Sprite3D的缓动效果。
 * ~Laya.Tween之所以不适用于Sprite3D是因为浅拷贝变量无法同步到原对象中去；
 * ~解决方式是：Laya.Tween来改变变量值，用update更新对象对应的变量值；
 * ~封装原生的Laya.Tween，支持所有Ease效果
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Handler = Laya.Handler;
var MtTween = /** @class */ (function () {
    function MtTween() {
    }
    /**
     * 平移，改变Target的位置
     * @param target 目标，必须为Sprite3D
     * @param position 移动的目标位置,Vector3
     * @param duration 移动的时间
     * @param ease 缓动方式
     * @param complete 完成回掉
     * @param delay 延迟缓动时间
     * @param coverBefore 是否覆盖之前的缓动。
     * @param autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    MtTween.Move = function (target, position, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return null;
        var pos = target.transform.position;
        var tween = Laya.Tween.to(pos, {
            x: position.x,
            y: position.y,
            z: position.z,
            update: new Handler(target, function () {
                this.transform.position = pos;
            })
        }, duration, ease, complete, delay, coverBefore, autoRecover);
        return tween;
    };
    /**
     * 旋转，改变Target的旋转角度
     * @param target 目标，必须为Sprite3D
     * @param rotation 移动的目标旋转角度,Vector3
     * @param duration 移动的时间
     * @param ease 缓动方式
     * @param complete 完成回掉
     * @param delay 延迟缓动时间
     * @param coverBefore 是否覆盖之前的缓动。
     * @param autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    MtTween.Rotate = function (target, rotation, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return null;
        var rot = target.transform.rotationEuler;
        var tween = Laya.Tween.to(rot, {
            x: rotation.x,
            y: rotation.y,
            z: rotation.z,
            update: new Handler(target, function () {
                this.transform.rotationEuler = rot;
            })
        }, duration, ease, complete, delay, coverBefore, autoRecover);
        return tween;
    };
    /**
     * 缩放 改变Target的缩放值
     * @param target 目标，必须为Sprite3D
     * @param scale 移动的目标缩放,Vector3
     * @param duration 移动的时间
     * @param ease 缓动方式
     * @param complete 完成回掉
     * @param delay 延迟缓动时间
     * @param coverBefore 是否覆盖之前的缓动。
     * @param autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    MtTween.Scale = function (target, scale, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return null;
        var _scale = target.transform.scale;
        var tween = Laya.Tween.to(_scale, {
            x: scale.x,
            y: scale.y,
            z: scale.z,
            update: new Handler(target, function () {
                this.transform.scale = _scale;
            })
        }, duration, ease, complete, delay, coverBefore, autoRecover);
        return tween;
    };
    /**
     * 透明度 改变Target的透明度，必须将模型的RenderMode改成Transparent
     * @param target Target,必须有MeshRender
     * @param aplha 透明度
     * @param duration 缓动的时间
     * @param ease 缓动方式
     * @param complete 完成回掉
     * @param delay 延迟缓动时间
     * @param coverBefore 是否覆盖之前的缓动。
     * @param autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    MtTween.Alpha = function (target, aplha, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return null;
        var render = target.meshRenderer;
        if (render && render.material) {
            var mat_1 = render.material;
            mat_1.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
            var albedo_1 = mat_1.albedoColor;
            if (albedo_1) {
                var tween = Laya.Tween.to(albedo_1, {
                    w: aplha,
                    update: new Handler(target, function () {
                        this.meshRenderer.material.albedoColor = albedo_1;
                    })
                }, duration, ease, Handler.create(target, function () {
                    if (aplha == 1)
                        mat_1.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_OPAQUE;
                    if (complete)
                        complete.run();
                }), delay, coverBefore, autoRecover);
                return tween;
            }
        }
        return null;
    };
    MtTween.MultiAlpha = function (target, aplha, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return;
        var render = target.meshRenderer;
        if (render && render.materials) {
            var _loop_1 = function (i) {
                var mat = render.materials[i];
                mat.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
                var albedo = mat.albedoColor;
                if (albedo) {
                    var tween = Laya.Tween.to(albedo, {
                        w: aplha,
                        update: new Handler(target, function () {
                            this.meshRenderer.materials[i].albedoColor = albedo;
                        })
                    }, duration, ease, Handler.create(target, function () {
                        if (aplha == 1)
                            mat.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_OPAQUE;
                        if (complete)
                            complete.run();
                    }), delay, coverBefore, autoRecover);
                }
            };
            for (var i = 0; i < render.materials.length; i++) {
                _loop_1(i);
            }
        }
    };
    return MtTween;
}());
exports.default = MtTween;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector3 = Laya.Vector3;
var Vector2 = Laya.Vector2;
var Label = Laya.Label;
var EventManager_1 = require("../Events/EventManager");
var Events_1 = require("../Events/Events");
var CameraMoveScript = /** @class */ (function (_super) {
    __extends(CameraMoveScript, _super);
    function CameraMoveScript() {
        var _this = _super.call(this) || this;
        _this.m_lastDistance = 0;
        _this.m_preRadian = 0;
        _this.m_forwardLength = 3;
        _this.m_lookAtPoint = new Vector3();
        _this.m_isTwoFingersTouch = false;
        _this.m_twoFingersDistance = 0;
        _this.IsShowLable = true;
        _this.Is2D = false;
        return _this;
    }
    CameraMoveScript.prototype.onAwake = function () {
        this.Init();
        this.AddEvenets();
        this.RefreshPitchRadian();
        this.RefreshLookAtPoint();
    };
    CameraMoveScript.prototype.onUpdate = function () {
        if (this.IsShowLable)
            this.ShowInfo();
        this.RayCastHit();
        this.CameraToZeroDistance();
    };
    CameraMoveScript.prototype.onDestroy = function () {
        this.RemoveEvents();
    };
    CameraMoveScript.prototype.Init = function () {
        this.m_camera = this.owner;
        this.m_tempVector3 = new Vector3();
        this.m_mousePoint = new Vector2();
        this.m_lastTouchFinger0 = new Vector2();
        this.m_lastTouchFinger1 = new Vector2();
        this.yawPitchRoll = new Laya.Vector3();
        this.resultRotation = new Laya.Quaternion();
        this.tempRotationZ = new Laya.Quaternion();
        this.tempRotationX = new Laya.Quaternion();
        this.tempRotationY = new Laya.Quaternion();
        this.m_ray = new Laya.Ray(new Vector3(), new Vector3());
        this.m_hitResult = new Laya.HitResult();
        if (this.IsShowLable)
            this.m_label = this.createLabel(new Vector2(10, 10));
        this.InitDiffPlatform();
    };
    /**
     * 不同平台不同配置，从json文件中读取
     */
    CameraMoveScript.prototype.InitDiffPlatform = function () {
        if (Laya.Browser.onAndroid || Laya.Browser.onIPhone || Laya.Browser.onMobile) {
            this.m_3dMoveSpeed = 0.02;
            this.m_3dRotateSpeed = 0.004;
            this.m_3dWheelSpeed = 2;
            this.m_2dMoveSpeed = 0.02;
            this.m_2dWheelSpeed = 2;
            this.m_3dMinZoomDistance = -30;
            this.m_3dMaxZoomDistance = 1000;
            this.m_3dMinCameraPitchRadian = 10 * Math.PI / 180;
            this.m_3dMaxCameraPitchRadian = 90 * Math.PI / 180;
            this.m_2dMinOrthographicSize = 12;
        }
        else if (Laya.Browser.onPC || Laya.Browser.onMac) {
            this.m_3dMoveSpeed = 0.04;
            this.m_3dRotateSpeed = 0.004;
            this.m_3dWheelSpeed = 2;
            this.m_2dMoveSpeed = 0.02;
            this.m_2dWheelSpeed = 2;
            this.m_3dMinZoomDistance = -30;
            this.m_3dMaxZoomDistance = 1000;
            this.m_3dMinCameraPitchRadian = 10 * Math.PI / 180;
            this.m_3dMaxCameraPitchRadian = 90 * Math.PI / 180;
            this.m_2dMinOrthographicSize = 12;
        }
    };
    CameraMoveScript.prototype.AddEvenets = function () {
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.mouseUp);
        Laya.stage.on(Laya.Event.MOUSE_WHEEL, this, this.mouseWheel);
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove);
        Laya.stage.on(Laya.Event.RIGHT_MOUSE_DOWN, this, this.rightMouseDown);
        Laya.stage.on(Laya.Event.RIGHT_MOUSE_UP, this, this.rightMouseUp);
    };
    CameraMoveScript.prototype.RemoveEvents = function () {
        Laya.stage.off(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.mouseUp);
        Laya.stage.off(Laya.Event.MOUSE_WHEEL, this, this.mouseWheel);
        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove);
        Laya.stage.off(Laya.Event.RIGHT_MOUSE_DOWN, this, this.rightMouseDown);
        Laya.stage.off(Laya.Event.RIGHT_MOUSE_UP, this, this.rightMouseUp);
    };
    CameraMoveScript.prototype.mouseDown = function (e) {
        this.m_camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
        this.m_lastMouseX = Laya.stage.mouseX;
        this.m_lastMouseY = Laya.stage.mouseY;
        this.m_isMouseDown = true;
        // //Two fingers operation
        var touches = e.touches;
        if (touches && touches.length == 2) {
            this.m_lastTouchFinger0.x = touches[0].stageX;
            this.m_lastTouchFinger0.y = touches[0].stageY;
            this.m_lastTouchFinger1.x = touches[1].stageX;
            this.m_lastTouchFinger1.y = touches[1].stageY;
            this.m_lastDistance = this.getDistance(touches);
            this.m_preRadian = this.atan2Ext(touches[0].stageY - touches[1].stageY, touches[0].stageX - touches[1].stageX);
            this.m_isTwoFingersTouch = true;
        }
    };
    CameraMoveScript.prototype.mouseUp = function (e) {
        this.m_isMouseDown = false;
        var touches = e.touches;
        if (touches && touches.length == 0) {
            this.m_isTwoFingersTouch = false;
        }
    };
    CameraMoveScript.prototype.rightMouseDown = function (e) {
        this.m_lastMouseX = Laya.stage.mouseX;
        this.m_lastMouseY = Laya.stage.mouseY;
        this.m_isMouseDown = true;
        this.m_isRightMouseButtonDown = true;
    };
    CameraMoveScript.prototype.rightMouseUp = function (e) {
        this.m_isMouseDown = false;
        this.m_isRightMouseButtonDown = false;
    };
    CameraMoveScript.prototype.mouseWheel = function (e) {
        if (e == null)
            return;
        var zoomDelta = e.delta;
        if (this.Is2D) {
            this.m_camera.orthographicVerticalSize += -zoomDelta * this.m_2dWheelSpeed;
            if (this.m_camera.orthographicVerticalSize < this.m_2dMinOrthographicSize) {
                this.m_camera.orthographicVerticalSize = this.m_2dMinOrthographicSize;
            }
        }
        else {
            this.cameraZoom(zoomDelta);
        }
        if (this.OnMouseWheel)
            this.OnMouseWheel(zoomDelta);
    };
    CameraMoveScript.prototype.mouseMove = function (e) {
        var touches = e.touches;
        if (!touches) {
            this.moveControlByMouse();
        }
        else {
            this.moveCtrlByTouch(touches);
        }
    };
    /**
    *  鼠标模式
    */
    CameraMoveScript.prototype.moveControlByMouse = function () {
        if (this.m_isMouseDown) {
            var deltaX = Laya.stage.mouseX - this.m_lastMouseX;
            var deltaY = Laya.stage.mouseY - this.m_lastMouseY;
            if (!this.m_isRightMouseButtonDown) {
                if (this.m_isLastTouchDoubleFingers) {
                    deltaX = 0;
                    deltaY = 0;
                    this.m_isLastTouchDoubleFingers = false;
                }
                this.moveRight(-this.m_3dMoveSpeed * deltaX);
                this.moveUp(this.m_3dMoveSpeed * deltaY);
                this.RefreshLookAtPoint();
            }
            else {
                if (this.Is2D)
                    return;
                var deltaX_1 = Laya.stage.mouseX - this.m_lastMouseX;
                var deltaY_1 = Laya.stage.mouseY - this.m_lastMouseY;
                this.rotateAround(-deltaY_1 * this.m_3dRotateSpeed, -deltaX_1 * this.m_3dRotateSpeed);
            }
            this.m_lastMouseX = Laya.stage.mouseX;
            this.m_lastMouseY = Laya.stage.mouseY;
        }
    };
    /**
     * 触控模式
     */
    CameraMoveScript.prototype.moveCtrlByTouch = function (touches) {
        if (touches.length == 1 && !this.m_isTwoFingersTouch) {
            //单指触控
            // this.camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
            var deltaX = Laya.stage.mouseX - this.m_lastMouseX;
            var deltaY = Laya.stage.mouseY - this.m_lastMouseY;
            if (this.m_isLastTouchDoubleFingers) {
                //如果上一次操作是双指,如双指操作时,抬起一指变单指操作,要做个清零,防止摄像机跳跃
                deltaX = 0;
                deltaY = 0;
                this.m_isLastTouchDoubleFingers = false;
            }
            //let speed: number = 0.06;
            this.moveRight(-this.m_3dMoveSpeed * deltaX);
            this.moveUp(this.m_3dMoveSpeed * deltaY);
            this.m_lastMouseX = Laya.stage.mouseX;
            this.m_lastMouseY = Laya.stage.mouseY;
            this.RefreshLookAtPoint();
        }
        else if (touches.length == 2) {
            if (this.Is2D) {
                var distance2 = this.getDistance(touches);
                var factor2 = 0.1;
                var pinchValue2 = 0;
                pinchValue2 = (distance2 - this.m_lastDistance) * factor2;
                this.m_lastDistance = distance2;
                this.m_camera.orthographicVerticalSize -= pinchValue2;
                if (this.m_camera.orthographicVerticalSize < this.m_2dMinOrthographicSize) {
                    this.m_camera.orthographicVerticalSize = this.m_2dMinOrthographicSize;
                }
            }
            else {
                //双指触控
                this.m_isTwoFingersTouch = true;
                this.m_isLastTouchDoubleFingers = true;
                var twoFingersDistance = this.getTwoFingersDistance(touches);
                var deltaDistance = Math.abs(twoFingersDistance - this.m_twoFingersDistance);
                this.m_twoFingersDistance = twoFingersDistance;
                //Two fingers drag
                var deltaX0 = touches[0].stageX - this.m_lastTouchFinger0.x;
                var deltaY0 = touches[0].stageY - this.m_lastTouchFinger0.y;
                var deltaX1 = touches[1].stageX - this.m_lastTouchFinger1.x;
                var deltaY1 = touches[1].stageY - this.m_lastTouchFinger1.y;
                var deltaY = (deltaY0 + deltaY1) * 0.5;
                var deltaX = (deltaX0 + deltaX1) * 0.5;
                this.rotateAround(-deltaY * this.m_3dRotateSpeed, 0);
                this.m_lastTouchFinger0.x = touches[0].stageX;
                this.m_lastTouchFinger0.y = touches[0].stageY;
                this.m_lastTouchFinger1.x = touches[1].stageX;
                this.m_lastTouchFinger1.y = touches[1].stageY;
                //Two fingers pinch
                var distance = this.getDistance(touches);
                var factor = 0.01;
                var pinchValue = 0;
                pinchValue += (distance - this.m_lastDistance) * factor;
                this.m_lastDistance = distance;
                var fingerPinchSpeed = 10;
                this.cameraZoom(pinchValue * fingerPinchSpeed);
                if (this.OnDoubleFingersPinch)
                    this.OnDoubleFingersPinch(pinchValue);
                //Two fingers twist
                var nowRadian = this.atan2Ext(touches[0].stageY - touches[1].stageY, touches[0].stageX - touches[1].stageX);
                var deltaRadian = nowRadian - this.m_preRadian;
                if (deltaRadian != 0) {
                    var twistValue = 180 / Math.PI * deltaRadian;
                    this.rotateAround(0, twistValue * 0.1);
                    this.m_preRadian = nowRadian;
                    if (this.OnDoubleFingersTwist)
                        this.OnDoubleFingersTwist(twistValue);
                }
            }
        }
    };
    /**
     * 向前移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveForward = function (distance) {
        this.m_tempVector3.x = this.m_tempVector3.y = 0;
        this.m_tempVector3.z = distance;
        this.m_camera.transform.translate(this.m_tempVector3);
    };
    /**
     * 向右移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveRight = function (distance) {
        this.m_tempVector3.y = this.m_tempVector3.z = 0;
        this.m_tempVector3.x = distance;
        this.m_camera.transform.translate(this.m_tempVector3);
    };
    /**
     * 向上移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveUp = function (distance) {
        this.m_tempVector3.x = this.m_tempVector3.z = 0;
        this.m_tempVector3.y = distance;
        this.m_camera.transform.translate(this.m_tempVector3, true);
    };
    /**
     * 缩放
     * @param delta
     */
    CameraMoveScript.prototype.cameraZoom = function (delta) {
        // if(this.m_hitObject!=null && !this.m_isRightMouseDown){
        //     this.m_forwardLength = this.getTwoPointsDistance(
        //         this.m_camera.transform.position,this.m_hitPoint);        
        // }
        var currentForwardLength = this.m_forwardLength;
        var distance = -delta * this.m_3dWheelSpeed;
        currentForwardLength += distance;
        if (delta > 0) {
            //拉近
            if (currentForwardLength < this.m_3dMinZoomDistance)
                distance += (this.m_3dMinZoomDistance - currentForwardLength);
        }
        else {
            //拉远
            if (currentForwardLength > this.m_3dMaxZoomDistance)
                distance -= (currentForwardLength - this.m_3dMaxZoomDistance);
        }
        this.moveForward(distance);
        this.m_forwardLength += distance;
    };
    /**
     * 旋转
     * @param angleX
     * @param angleY
     */
    CameraMoveScript.prototype.rotateAround = function (angleX, angleY) {
        var currentRadian = this.m_currentPitchRadian;
        currentRadian -= angleX;
        if (angleX < 0) {
            //下拖动,往上转
            if (currentRadian > this.m_3dMaxCameraPitchRadian)
                angleX += (currentRadian - this.m_3dMaxCameraPitchRadian);
        }
        else {
            //上拖动,往下转
            if (currentRadian < this.m_3dMinCameraPitchRadian)
                angleX += (currentRadian - this.m_3dMinCameraPitchRadian);
        }
        this.m_camera.transform.rotate(new Vector3(angleX, 0, 0));
        this.m_camera.transform.rotate(new Vector3(0, angleY, 0), false);
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        var newPosition = new Vector3();
        Vector3.scale(forward, -1, forward);
        newPosition = this.Forward(this.m_lookAtPoint, forward, this.m_forwardLength);
        this.m_camera.transform.position = newPosition;
        this.RefreshPitchRadian();
    };
    CameraMoveScript.prototype._updateRotation = function () {
        if (Math.abs(this.yawPitchRoll.y) < 1.50) {
            Laya.Quaternion.createFromYawPitchRoll(this.yawPitchRoll.x, this.yawPitchRoll.y, this.yawPitchRoll.z, this.tempRotationZ);
            this.tempRotationZ.cloneTo(this.m_camera.transform.localRotation);
            this.m_camera.transform.localRotation = this.m_camera.transform.localRotation;
        }
    };
    //把Math.atan2值域映射到[0, 2pi]
    CameraMoveScript.prototype.atan2Ext = function (y, x) {
        var radian = Math.atan2(y, x);
        if (radian >= 0)
            return radian;
        else
            return radian + 2 * Math.PI;
    };
    CameraMoveScript.prototype.getTwoFingersDistance = function (touches) {
        var fingersDistance = 0;
        var dx = touches[0].stageX - touches[1].stageX;
        var dy = touches[0].stageY - touches[1].stageY;
        fingersDistance = Math.sqrt(dx * dx + dy * dy);
        return fingersDistance;
    };
    CameraMoveScript.prototype.rotateAroundY = function (ponit, radius, angle) {
        var posX = Math.cos(angle) * radius;
        var posY = Math.sin(angle) * radius;
        this.m_camera.transform.position = new Vector3(posX, this.m_camera.transform.position.y, posY);
        this.m_camera.transform.lookAt(ponit, new Vector3(0, 1, 0), false);
    };
    CameraMoveScript.prototype.rotateAroundX = function (ponit, radius, angle) {
        this.m_camera.transform.rotate(new Vector3(angle, 0, 0));
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        var position = new Vector3();
        var deltaPosition = new Vector3();
        Vector3.scale(forward, -radius, deltaPosition);
        Vector3.add(ponit, deltaPosition, position);
        this.m_camera.transform.position = position;
    };
    //计算两个触摸点之间的距离
    CameraMoveScript.prototype.getDistance = function (points) {
        var distance = 0;
        if (points && points.length == 2) {
            var dx = points[0].stageX - points[1].stageX;
            var dy = points[0].stageY - points[1].stageY;
            distance = Math.sqrt(dx * dx + dy * dy);
        }
        return distance;
    };
    CameraMoveScript.prototype.getTwoPointsDistance = function (pointA, pointB) {
        var distance = 0;
        var dx = pointA.x - pointB.x;
        var dy = pointA.y - pointB.y;
        var dz = pointA.z - pointB.z;
        distance = Math.sqrt(dx * dx + dy * dy + dz * dz);
        return distance;
    };
    CameraMoveScript.prototype.Forward = function (position, direction, distance) {
        var deltaPosition = new Vector3();
        var newPosition = new Vector3();
        Vector3.scale(direction, distance, deltaPosition);
        Vector3.add(position, deltaPosition, newPosition);
        return newPosition;
    };
    CameraMoveScript.prototype.RefreshLookAtPoint = function () {
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        this.m_lookAtPoint = this.Forward(this.m_camera.transform.position, forward, this.m_forwardLength);
    };
    CameraMoveScript.prototype.RefreshPitchRadian = function () {
        this.m_camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
        this.m_currentPitchRadian = Math.abs(this.yawPitchRoll.y);
    };
    //temp
    CameraMoveScript.prototype.CameraToZeroDistance = function () {
        var dis = 0;
        if (this.Is2D) {
            dis = this.m_camera.orthographicVerticalSize;
        }
        else {
            var camPos = this.m_camera.transform.position;
            dis = Vector3.distance(camPos, Vector3._ZERO);
            this.m_label.text += "摄像机到原点的距离：" + dis;
        }
        EventManager_1.default.Instance().PostEvent(Events_1.Events.OnCameraDistanceChanged.toString(), dis);
    };
    /**
     * 绕给定点和轴旋转
     * @param target 旋转对象
     * @param rotatePos 给定点位置
     * @param dir 给定方向
     * @param angle 旋转角度，弧度
     */
    CameraMoveScript.prototype.RotateAround = function (target, rotatePos, dir, angle) {
        //创建一个四元数
        var quaternion = new Laya.Quaternion();
        Laya.Quaternion.createFromAxisAngle(dir, angle, quaternion);
        //计算旋转后的Position
        var deltapos = new Laya.Vector3();
        Laya.Vector3.subtract(target.transform.position, rotatePos, deltapos);
        var changeVector3 = new Laya.Vector3();
        Laya.Vector3.transformQuat(deltapos, quaternion, changeVector3);
        var resultPos = new Laya.Vector3();
        Laya.Vector3.add(changeVector3, rotatePos, resultPos);
        target.transform.position = resultPos;
        //计算旋转后的Rotation
        var newRotation = new Laya.Quaternion();
        Laya.Quaternion.multiply(target.transform.rotation, quaternion, newRotation);
        target.transform.rotation = newRotation;
    };
    /**
    * 根据碰撞对象的位置，设置摄像机的缩放和旋转轴等；
    * 旋转操作，以屏幕中心点发出射线，如果有碰撞对象，则将碰撞点作为旋转中心，如果没有则将（0,0,0）设为旋转中心；
    * 缩放操作，以鼠标位置发出射线，若有碰撞对象，则根据碰撞点与摄像机的距离限制摄像机的最小距离；
    */
    CameraMoveScript.prototype.RayCastHit = function () {
        if (this.m_camera != null && this.m_scene3d != null) {
            this.m_mousePoint.x = Laya.stage.mouseX;
            this.m_mousePoint.y = Laya.stage.mouseY;
            this.m_camera.viewportPointToRay(this.m_mousePoint, this.m_ray);
            this.m_scene3d.physicsSimulation.rayCast(this.m_ray, this.m_hitResult);
            if (this.m_hitResult.succeeded) {
                this.m_hitObject = this.m_hitResult.collider.owner;
                this.m_hitPoint = this.m_hitResult.point;
            }
            else {
                this.m_hitObject = null;
            }
        }
    };
    /**
     * 创建一个Lable
     * @param color
     * @param strokeColor
     */
    CameraMoveScript.prototype.createLabel = function (pos, color, strokeColor) {
        var _color = "#ffffff";
        var _strokeColor = "#000000";
        var _strokeWidth = 1;
        var label = new Label();
        label.font = "Microsoft YaHei";
        label.text = "SAMPLE DEMO";
        label.fontSize = 20;
        if (color) {
            label.color = color;
        }
        else {
            label.color = _color;
        }
        if (strokeColor) {
            label.stroke = _strokeWidth;
            label.strokeColor = _strokeColor;
        }
        label.pos(pos.x, pos.y);
        Laya.stage.addChild(label);
        return label;
    };
    CameraMoveScript.prototype.ShowInfo = function () {
        var pos = this.m_camera.transform.position;
        var rot = this.m_camera.transform.rotationEuler;
        this.m_label.text = "Camera Pos : (" + pos.x.toFixed(2) + "," + pos.y.toFixed(2) + "," + pos.z.toFixed(2) + ")" + "\n";
        this.m_label.text += "Camera Rot : (" + rot.x.toFixed(2) + "," + rot.y.toFixed(2) + "," + rot.z.toFixed(2) + ")" + "\n";
        this.m_label.text += "Camera orthographicVerticalSize : " + this.m_camera.orthographicVerticalSize + "\n";
        this.m_label.text += "Mouse PosX : " + Laya.stage.mouseX + "\n";
        this.m_label.text += "Mouse PosY : " + Laya.stage.mouseY + "\n";
        this.m_label.text += "是否在2D: " + this.Is2D + "\n";
        this.m_label.text += "this forwardlength: " + this.m_forwardLength + "\n";
        this.m_label.text += "3dMoveSpeed : " + this.m_3dMoveSpeed + "\n";
        this.m_label.text += "2dMoveSpeed : " + this.m_2dMoveSpeed + "\n";
    };
    return CameraMoveScript;
}(Laya.Script3D));
exports.default = CameraMoveScript;
},{"../Events/EventManager":16,"../Events/Events":17}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LabelUpdatPos = /** @class */ (function (_super) {
    __extends(LabelUpdatPos, _super);
    function LabelUpdatPos() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LabelUpdatPos.prototype.onAwake = function () {
        this.m_label = this.owner;
        if (Laya.Browser.onAndroid || Laya.Browser.onIPhone || Laya.Browser.onMobile) {
            this.m_fontsize = 25;
        }
        else if (Laya.Browser.onPC || Laya.Browser.onMac) {
            this.m_fontsize = 14;
        }
    };
    LabelUpdatPos.prototype.onStart = function () {
        this.SetLabelPos();
    };
    LabelUpdatPos.prototype.onUpdate = function () {
        this.SetLabelPos();
    };
    LabelUpdatPos.prototype.Init = function (parent, camera, content) {
        this.m_parent = parent;
        this.m_camera = camera;
        this.InitLabel();
        this.SetLabelContent(content);
    };
    LabelUpdatPos.prototype.SetLabelContent = function (content) {
        if (this.m_label == null)
            return;
        this.m_label.text = content;
    };
    LabelUpdatPos.prototype.InitLabel = function () {
        if (this.m_label == null)
            return;
        this.m_label.width = 300;
        this.m_label.height = 50;
        this.m_label.pivotX = 150;
        this.m_label.pivotY = 25;
        this.m_label.font = "Microsoft YaHei";
        this.m_label.text = "SAMPLE DEMO";
        this.m_label.fontSize = this.m_fontsize;
        this.m_label.color = "#ffffff";
        this.m_label.stroke = 0.05;
        this.m_label.strokeColor = "#000000";
        this.m_label.align = "center";
    };
    LabelUpdatPos.prototype.SetLabelPos = function () {
        if (this.m_parent == null || this.m_camera == null)
            return;
        var floorPos = this.m_parent.transform.position;
        var newPos = new Laya.Vector3(floorPos.x, floorPos.y + 3, floorPos.z);
        var screenPos = new Laya.Vector3();
        this.m_camera.worldToViewportPoint(newPos, screenPos);
        this.m_label.pos(screenPos.x, screenPos.y + 15);
    };
    return LabelUpdatPos;
}(Laya.Script));
exports.default = LabelUpdatPos;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LightControl = /** @class */ (function (_super) {
    __extends(LightControl, _super);
    function LightControl() {
        return _super.call(this) || this;
    }
    LightControl.prototype.onAwake = function () {
        this.Light = this.owner;
    };
    LightControl.prototype.onUpdate = function () {
        this.Light.transform.position = this.Camera.transform.position;
        this.Light.transform.rotationEuler = this.Camera.transform.rotationEuler;
    };
    return LightControl;
}(Laya.Script3D));
exports.default = LightControl;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var Vector3 = Laya.Vector3;
var EventManager_1 = require("../Events/EventManager");
var Events_1 = require("../Events/Events");
var RaySelector = /** @class */ (function (_super) {
    __extends(RaySelector, _super);
    function RaySelector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_mousePoint = new Laya.Vector2();
        return _this;
    }
    RaySelector.prototype.onAwake = function () {
        if (this.owner != null) {
            var cam = this.owner;
            if (cam != null) {
                this.Camera = cam;
            }
        }
        this.m_ray = new Laya.Ray(new Vector3(), new Vector3());
        this.m_hitResult = new Laya.HitResult();
        this.AddMouseEvent();
    };
    RaySelector.prototype.onUpdate = function () {
        this.RayCastHit();
    };
    RaySelector.prototype.AddMouseEvent = function () {
        Laya.stage.on(Laya.Event.CLICK, this, this.OnRayCastClicked);
    };
    RaySelector.prototype.RemoveMouseEvent = function () {
        Laya.stage.off(Laya.Event.CLICK, this, this.OnRayCastClicked);
    };
    RaySelector.prototype.onDisable = function () {
        this.RemoveMouseEvent();
    };
    RaySelector.prototype.RayCastHit = function () {
        this.m_mousePoint.x = Laya.stage.mouseX;
        this.m_mousePoint.y = Laya.stage.mouseY;
        if (this.Camera != null && this.Scene3D != null) {
            this.Camera.viewportPointToRay(this.m_mousePoint, this.m_ray);
            this.Scene3D.physicsSimulation.rayCast(this.m_ray, this.m_hitResult);
            if (this.m_hitResult.succeeded) {
                var collider = this.m_hitResult.collider.owner;
                //this.m_deltaClickTime +=Laya.timer.delta;
                if (this.m_isClicked) {
                    EventManager_1.default.Instance().PostEvent(Events_1.Events.OnSpaceClicked.toString(), collider);
                    GameManager_1.default.Instance().BIM.SetLayaColor(collider, Laya.Color.RED);
                }
                if (this.m_selected != collider) {
                    this.m_isClicked = false;
                    if (this.m_selected != null) {
                        EventManager_1.default.Instance().PostEvent(Events_1.Events.OnSpaceExit.toString(), this.m_selected);
                        GameManager_1.default.Instance().BIM.ResetColor(this.m_selected);
                        this.m_selected = null;
                    }
                    this.m_selected = collider;
                    EventManager_1.default.Instance().PostEvent(Events_1.Events.OnSpaceExit.toString(), this.m_selected);
                    GameManager_1.default.Instance().BIM.SetLayaColor(collider, Laya.Color.YELLOW);
                }
            }
        }
    };
    RaySelector.prototype.OnRayCastClicked = function () {
        this.m_isClicked = true;
        // this.m_mousePoint.x = Laya.stage.mouseX;
        // this.m_mousePoint.y = Laya.stage.mouseY;
        // this.Camera.viewportPointToRay(this.m_mousePoint,this.m_ray);
        // if(this.Scene3D!=null){
        //     this.Scene3D.physicsSimulation.rayCast(this.m_ray,this.m_hitResult);
        //     if(this.m_hitResult.succeeded){
        //         var colliderName = this.m_hitResult.collider.owner.name;
        //         //console.debug("碰撞的对象为："+ colliderName);
        //         var floor:Laya.MeshSprite3D = GameManager.Instance().BIM.GetOneFloorSprite3D(colliderName);
        //         if(floor==null)return ;
        //         var mats = floor.meshRenderer.materials;
        //         mats.forEach(element => {
        //             var mat:Laya.BlinnPhongMaterial = element as Laya.BlinnPhongMaterial;
        //             mat.albedoColor = new Laya.Vector4(1,0,0,1);
        //         });
        //     }
        // }
    };
    RaySelector.prototype.DrawLine = function () {
        // this.m_mousePoint.x = Laya.MouseManager.instance.mouseX;
        // this.m_mousePoint.y = Laya.MouseManager.instance.mouseY;
        // this.m_camera.worldToViewportPoint(this.m_camera.transform.position,this.camPos);
        // this.sp.graphics.clear();
        // this.sp.graphics.drawLine(this.camPos.x,this.camPos.y,this.m_mousePoint.x,this.m_mousePoint.y,"#ff0000",1); 
    };
    return RaySelector;
}(Laya.Script3D));
exports.default = RaySelector;
},{"../Events/EventManager":16,"../Events/Events":17,"../GameManager":18}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NameConfig = /** @class */ (function () {
    function NameConfig() {
    }
    NameConfig.ip = "meetoo.cn";
    NameConfig.port = "1986";
    NameConfig.userName = "yangxin";
    NameConfig.userPassprot = "81DC9BDB52D04DC20036DBD8313ED055";
    NameConfig.screenWidth = Laya.Browser.width;
    NameConfig.screenHegiht = Laya.Browser.height;
    NameConfig.floorLayer = "buildingLevels";
    NameConfig.floor = "Floor";
    NameConfig.campusCode = "PUMCHW";
    return NameConfig;
}());
exports.default = NameConfig;
},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var TableOrgnization_1 = require("./TableOrgnization");
var TableBIMUsageType_1 = require("./TableBIMUsageType");
var TableBIMSpace_1 = require("./TableBIMSpace");
var DataManager = /** @class */ (function () {
    function DataManager() {
    }
    DataManager.prototype.Init = function () {
        this.RegisterTables();
    };
    DataManager.prototype.RegisterTables = function () {
        var _this = this;
        this.tableBimSpace = new TableBIMSpace_1.default();
        this.tableBimSpace.Init(GameManager_1.default.Instance().Http.URL, function () {
            _this.tableOrganization = new TableOrgnization_1.default();
            _this.tableOrganization.Init(GameManager_1.default.Instance().Http.URL, function () {
                _this.tableUsageType = new TableBIMUsageType_1.default();
                _this.tableUsageType.Init(GameManager_1.default.Instance().Http.URL, function () {
                    GameManager_1.default.Instance().LoadRes();
                });
            });
        });
    };
    DataManager.prototype.GetOneOrganizationName = function (code, level) {
        if (this.tableOrganization.IsLoaded) {
            return this.tableOrganization.GetOneOrganizationName(code, level);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneOrganizationColor = function (code) {
        if (this.tableOrganization.IsLoaded) {
            return this.tableOrganization.GetOneOrganizationColor(code);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneUsageName = function (code) {
        if (this.tableUsageType.IsLoaded) {
            return this.tableUsageType.GetOneUsageName(code);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneUsageColor = function (code) {
        if (this.tableUsageType.IsLoaded) {
            return this.tableUsageType.GetOneUsageColor(code);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneSpaceData = function (code) {
        if (this.tableBimSpace.IsLoaded) {
            return this.tableBimSpace.GetOneSpaceData(code);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneLevelOrganizations = function (level) {
        if (this.tableBimSpace.IsLoaded) {
            return this.tableBimSpace.GetOneLevelOrgnizations(level);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneLevelFloorsByOrgs = function (level, orgs) {
        if (this.tableBimSpace.IsLoaded) {
            return this.tableBimSpace.GetOneLevelCodesByOrgs(level, orgs);
        }
        else {
            return null;
        }
    };
    return DataManager;
}());
exports.default = DataManager;
},{"../GameManager":18,"./TableBIMSpace":13,"./TableBIMUsageType":14,"./TableOrgnization":15}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var TableBIMSpace = /** @class */ (function () {
    function TableBIMSpace() {
        this.TabelName = "BIMSpace";
    }
    TableBIMSpace.prototype.Init = function (url, finished) {
        this.InitContainer();
        var postUrl = url.concat("/IVS/BIMSpace/dynamicQuery");
        var postBody = JSON.stringify({ "levelCodeList": ["PUMCHW-D03-F001", "PUMCHW-D03-F002", "PUMCHW-D03-F003"] });
        this.AsynLoadData(postUrl, postBody, finished);
    };
    TableBIMSpace.prototype.GetOneSpaceData = function (code) {
        if (code == null)
            return null;
        if (this.SpaceDataDic.has(code)) {
            return this.SpaceDataDic.get(code);
        }
        else
            return null;
    };
    TableBIMSpace.prototype.GetOrganizationByCode = function (code) {
        if (code == null)
            return null;
        if (this.SpaceDataDic.has(code)) {
            return this.SpaceDataDic.get(code).organizationCode;
        }
        else
            return null;
    };
    TableBIMSpace.prototype.GetOneLevelOrgnizations = function (level) {
        var _this = this;
        var orgs = new Array();
        if (this.m_levelSpaceCodes.has(level)) {
            this.m_levelSpaceCodes.get(level).forEach(function (element) {
                var orgCode = _this.GetOrganizationByCode(element);
                var b = orgs.some(function (code) { return code == orgCode; });
                if (!b)
                    orgs.push(orgCode);
            });
        }
        return orgs;
    };
    TableBIMSpace.prototype.GetOneLevelCodesByOrgs = function (level, orgs) {
        var _this = this;
        var floorCodes = new Array();
        if (this.m_levelSpaceCodes.has(level)) {
            this.m_levelSpaceCodes.get(level).forEach(function (element) {
                var orgCode = _this.GetOrganizationByCode(element);
                var b = orgs.some(function (code) {
                    return code == orgCode;
                });
                if (b) {
                    floorCodes.push(element);
                }
            });
        }
        return floorCodes;
    };
    TableBIMSpace.prototype.InitContainer = function () {
        this.m_levelSpaceCodes = new Laya.WeakObject();
        this.SpaceDataDic = new Laya.WeakObject();
    };
    TableBIMSpace.prototype.AsynLoadData = function (url, postBody, finished) {
        var _this = this;
        if (url == null || postBody == null)
            return;
        GameManager_1.default.Instance().Http.post(url, postBody, this, function (e) {
            if (e.state == "succeed") {
                var rst = e.data["data"]["list"];
                rst.forEach(function (element) {
                    var ele = _this.CreateSpaceData(element);
                    if (ele != null && ele.code != null) {
                        if (!_this.SpaceDataDic.has(ele.code)) {
                            _this.SpaceDataDic.set(ele.code, ele);
                        }
                    }
                    //levelCodes
                    var level = ele.levelCode;
                    if (!_this.m_levelSpaceCodes.has(level)) {
                        _this.m_levelSpaceCodes.set(level, new Array());
                    }
                    _this.m_levelSpaceCodes.get(level).push(ele.code);
                });
                finished.apply();
                _this.IsLoaded = true;
            }
        });
    };
    TableBIMSpace.prototype.CreateSpaceData = function (element) {
        var data = new SpaceData();
        data.code = element.code;
        data.usageName = element.usageName;
        data.buildingCode = element.buildingCode;
        data.campusCode = element.campusCode;
        data.levelCode = element.levelCode;
        data.organizationCode = element.organizationCode;
        data.usageTypeCode = element.usageTypeCode;
        data.useArea = element.useArea.toFixed(2).toString() + "m²";
        data.perimeter = element.perimeter;
        return data;
    };
    return TableBIMSpace;
}());
exports.default = TableBIMSpace;
var SpaceData = /** @class */ (function () {
    function SpaceData() {
    }
    return SpaceData;
}());
exports.SpaceData = SpaceData;
},{"../GameManager":18}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var TableUsageType = /** @class */ (function () {
    function TableUsageType() {
        this.TabelName = "BIMUsageType";
    }
    TableUsageType.prototype.Init = function (url, finished) {
        this.InitContainer();
        var postUrl = url.concat("/IVS/Common/retrieveAllByTableName");
        var postBody = JSON.stringify({ "tableName": this.TabelName });
        this.AsynLoadData(postUrl, postBody, finished);
    };
    TableUsageType.prototype.GetOneUsageName = function (code) {
        if (code == null)
            return null;
        if (this.UsageTypeDic.has(code)) {
            var data = this.UsageTypeDic.get(code);
            return data.name;
        }
        else {
            return null;
        }
    };
    TableUsageType.prototype.GetOneUsageColor = function (code) {
        if (code == null)
            return null;
        var level = this.GetUsageLevelLevel(code);
        if (level != "2") {
            code = code.substr(0, 4);
        }
        if (this.UsageTypeDic.has(code)) {
            var data = this.UsageTypeDic.get(code);
            return data.color;
        }
        else {
            return null;
        }
    };
    TableUsageType.prototype.GetUsageLevelLevel = function (code) {
        if (code == null)
            return null;
        if (this.UsageTypeDic.has(code)) {
            var data = this.UsageTypeDic.get(code);
            return data.level;
        }
        else {
            return null;
        }
    };
    TableUsageType.prototype.InitContainer = function () {
        this.UsageTypeDic = new Laya.WeakObject();
    };
    TableUsageType.prototype.AsynLoadData = function (url, postbody, fininshed) {
        var _this = this;
        GameManager_1.default.Instance().Http.post(url, postbody, this, function (e) {
            if (e.state == "succeed") {
                var rst = e.data["data"]["list"];
                rst.forEach(function (element) {
                    var ele = _this.CreateUsageType(element);
                    if (ele != null && ele.code != null) {
                        if (!_this.UsageTypeDic.has(ele.code)) {
                            _this.UsageTypeDic.set(ele.code, ele);
                        }
                    }
                });
                fininshed.apply();
                _this.IsLoaded = true;
            }
        });
    };
    TableUsageType.prototype.CreateUsageType = function (element) {
        var data = new UsageType();
        data.code = element.code;
        data.name = element.name;
        data.level = element.level;
        data.color = element.color;
        return data;
    };
    return TableUsageType;
}());
exports.default = TableUsageType;
var UsageType = /** @class */ (function () {
    function UsageType() {
    }
    return UsageType;
}());
exports.UsageType = UsageType;
},{"../GameManager":18}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var TableOrgnization = /** @class */ (function () {
    function TableOrgnization() {
        this.TabelName = "Organization";
    }
    TableOrgnization.prototype.Init = function (url, finished) {
        this.InitContainer();
        var postUrl = url.concat("/IVS/Common/retrieveAllByTableName");
        var postBody = JSON.stringify({ "tableName": this.TabelName });
        this.AsynLoadData(postUrl, postBody, finished);
    };
    TableOrgnization.prototype.GetOneOrganizationName = function (code, level) {
        if (code == null)
            return null;
        code = level == null ? code : code.substr(0, 2 * parseInt(level));
        if (this.orgnizationDic.has(code)) {
            var data = this.orgnizationDic.get(code);
            return data.name;
        }
        else {
            return null;
        }
    };
    TableOrgnization.prototype.GetOneOrganizationColor = function (code) {
        if (code == null)
            return null;
        var level = this.GetOrganizationLevel(code);
        if (level != "2") {
            code = code.substr(0, 4);
        }
        if (this.orgnizationDic.has(code)) {
            var data = this.orgnizationDic.get(code);
            return data.color;
        }
        else {
            return null;
        }
    };
    TableOrgnization.prototype.GetOrganizationLevel = function (code) {
        if (code == null)
            return null;
        if (this.orgnizationDic.has(code)) {
            var data = this.orgnizationDic.get(code);
            return data.level;
        }
        else {
            return null;
        }
    };
    TableOrgnization.prototype.InitContainer = function () {
        this.orgnizationDic = new Laya.WeakObject();
    };
    TableOrgnization.prototype.AsynLoadData = function (url, postbody, fininshed) {
        var _this = this;
        GameManager_1.default.Instance().Http.post(url, postbody, this, function (e) {
            if (e.state == "succeed") {
                var rst = e.data["data"]["list"];
                rst.forEach(function (element) {
                    var ele = _this.CreateOrganization(element);
                    if (ele != null && ele.code != null) {
                        if (!_this.orgnizationDic.has(ele.code)) {
                            _this.orgnizationDic.set(ele.code, ele);
                        }
                    }
                });
                fininshed.apply();
                _this.IsLoaded = true;
            }
        });
    };
    TableOrgnization.prototype.CreateOrganization = function (element) {
        var data = new Orgnization();
        data.code = element.code;
        data.name = element.name;
        data.level = element.level;
        data.color = element.color;
        return data;
    };
    return TableOrgnization;
}());
exports.default = TableOrgnization;
var Orgnization = /** @class */ (function () {
    function Orgnization() {
    }
    return Orgnization;
}());
exports.Orgnization = Orgnization;
},{"../GameManager":18}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventDispatcher = laya.events.EventDispatcher;
var EventManager = /** @class */ (function (_super) {
    __extends(EventManager, _super);
    function EventManager() {
        return _super.call(this) || this;
    }
    EventManager.Instance = function () {
        if (EventManager._instance == null) {
            EventManager._instance = new EventManager();
        }
        return EventManager._instance;
    };
    EventManager.prototype.PostEvent = function (eName, args) {
        //onsole.debug("分发事件");
        EventManager.eventDispatcher.event(eName, args);
    };
    EventManager.prototype.AddEventListener = function (eName, caller, listener, args) {
        //console.log("侦听事件",eName);
        EventManager.eventDispatcher.on(eName, caller, listener, args);
    };
    EventManager.prototype.RemoveEventListener = function (eName, caller, listener, once) {
        //console.log("移除事件",eName);
        EventManager.eventDispatcher.off(eName, caller, listener, once);
    };
    EventManager.eventDispatcher = new EventDispatcher();
    return EventManager;
}(EventDispatcher));
exports.default = EventManager;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Events;
(function (Events) {
    Events[Events["OnUI_LevelBtn_Clicked"] = 0] = "OnUI_LevelBtn_Clicked";
    Events[Events["OnSpaceEnter"] = 1] = "OnSpaceEnter";
    Events[Events["OnSpaceClicked"] = 2] = "OnSpaceClicked";
    Events[Events["OnSpaceExit"] = 3] = "OnSpaceExit";
    Events[Events["OnCameraDistanceChanged"] = 4] = "OnCameraDistanceChanged";
    Events[Events["OnDepTreeItemClicked"] = 5] = "OnDepTreeItemClicked";
})(Events = exports.Events || (exports.Events = {}));
},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MtHttp_1 = require("./Network/MtHttp");
var NameConfig_1 = require("./Configure/NameConfig");
var DataManager_1 = require("./Data/DataManager");
var Handler = Laya.Handler;
var MainUI_1 = require("./MainUI");
var BIMManager_1 = require("./BIM/BIMManager");
var CameraManager_1 = require("./Camera/CameraManager");
var EventManager_1 = require("./Events/EventManager");
var Events_1 = require("./Events/Events");
var GameManager = /** @class */ (function () {
    function GameManager() {
        this.LoginLock = false;
        this.Http = new MtHttp_1.default(NameConfig_1.default.ip, NameConfig_1.default.port);
        this.BIM = new BIMManager_1.default();
        this.Data = new DataManager_1.default();
        this.Camera = new CameraManager_1.default();
        this.AddEvents();
    }
    GameManager.Instance = function () {
        if (GameManager._instance == null) {
            GameManager._instance = new GameManager();
        }
        return GameManager._instance;
    };
    GameManager.prototype.AddEvents = function () {
        EventManager_1.default.Instance().AddEventListener(Events_1.Events.OnUI_LevelBtn_Clicked.toString(), this, this.OnLevelBtnClicked);
    };
    GameManager.prototype.OnLevelBtnClicked = function (levelName) {
        this.BIM.HideOneLevelFloors(this.BIM.CurrenLevel);
        this.BIM.ShowOneLevelFloors(levelName);
        this.MainUI.CreateTree(this.Data.GetOneLevelOrganizations(this.BIM.CurrenLevel));
    };
    GameManager.prototype.Login = function () {
        if (this.LoginLock)
            return;
        var longinUrl = this.Http.URL.concat("/IVS/login");
        var postBody = JSON.stringify({ "name": NameConfig_1.default.userName,
            "pwd": NameConfig_1.default.userPassprot,
            "thirdPartyCode": "0" });
        this.Http.post(longinUrl, postBody, this, this.LoginSucceed);
        this.LoginLock = true;
    };
    GameManager.prototype.LoginSucceed = function (e) {
        if (e.state == "succeed") {
            console.debug("Login succeed!");
            this.LoadData();
            //test
            //this.LoadRes();
        }
        else {
            alert(e.msg);
        }
    };
    GameManager.prototype.LoadData = function () {
        this.Data.Init();
    };
    GameManager.prototype.LoadRes = function () {
        var _this = this;
        Laya.loader.load("res/JsonFile/res_pumchw.json", Handler.create(this, function (data) {
            var resUrl = new Array();
            data.url.forEach(function (element) {
                resUrl.push(_this.Http.URL.concat("/Patch/res/", element));
            });
            _this.BIM.LoadRes(resUrl, function () {
                _this.InitMainUI();
                _this.BIM.ShowOneLevelFloors(_this.BIM.CurrenLevel);
            });
        }));
    };
    GameManager.prototype.Init3DScene = function () {
        if (this.IsInitScene)
            return;
        Laya3D.init(0, 0, true);
        Laya.stage.scaleMode = Laya.Stage.SCALE_FULL;
        Laya.stage.screenMode = Laya.Stage.SCREEN_NONE;
        //Laya.Stat.show();
        this.MainScene = new Laya.Scene3D();
        Laya.stage.addChild(this.MainScene);
        this.Camera.InitCamera();
        this.IsInitScene = true;
    };
    GameManager.prototype.InitMainUI = function () {
        this.MainUI = new MainUI_1.default();
        Laya.stage.addChild(this.MainUI);
        this.MainUI.CreateTree(this.Data.GetOneLevelOrganizations(this.BIM.CurrenLevel));
        this.MainUI.CreateLevels(this.BIM.Levels);
    };
    return GameManager;
}());
exports.default = GameManager;
},{"./BIM/BIMManager":3,"./Camera/CameraManager":4,"./Configure/NameConfig":11,"./Data/DataManager":12,"./Events/EventManager":16,"./Events/Events":17,"./MainUI":20,"./Network/MtHttp":21}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameManager_1 = require("./GameManager");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        GameUI._instance = _this;
        _this.GameManager = GameManager_1.default.Instance();
        _this.UIAdapter();
        _this.LoginBtn.on(Laya.Event.CLICK, _this, _this.OnLoginBtnClicked);
        Laya.stage.on(Laya.Event.RESIZE, Laya.stage, function () {
            _this.UIAdapter();
        });
        return _this;
    }
    //Enable初始化
    GameUI.prototype.onEnable = function () {
    };
    //登陆
    GameUI.prototype.OnLoginBtnClicked = function (e) {
        //GameManager.Instance().Login();
        this.GameManager.Login();
    };
    //设置资源加载进度
    GameUI.prototype.SetLoadPercent = function (percent) {
        this.ProgressBar.visible = true;
        this.ProgressBar.value = percent;
        if (percent == 1) {
            this.DestroyScene();
        }
    };
    GameUI.prototype.DestroyScene = function () {
        //this.destroy();
        Laya.Scene.close(this.scene);
    };
    //UI适配
    GameUI.prototype.UIAdapter = function () {
        var width = Laya.Browser.width;
        var height = Laya.Browser.height;
        this.width = width;
        this.height = height;
        this.Background.width = width;
        this.Background.height = height;
        this.Title.pos(width / 2, height / 4);
        this.LoginBtn.pos(width / 2, height / 3 + 100);
        this.ProgressBar.pos(width / 2, height * 3 / 4);
        this.ProgressBar.visible = false;
    };
    return GameUI;
}(layaMaxUI_1.ui.portal.LoadingUI));
exports.default = GameUI;
},{"./../ui/layaMaxUI":26,"./GameManager":18}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameManager_1 = require("./GameManager");
var BIMManager_1 = require("./BIM/BIMManager");
var Button = Laya.Button;
var Common_1 = require("./Common/Common");
var EventManager_1 = require("./Events/EventManager");
var Events_1 = require("./Events/Events");
var UITree_1 = require("./UI/Tree/UITree");
var UITreeItem_1 = require("./UI/Tree/UITreeItem");
var MainUI = /** @class */ (function (_super) {
    __extends(MainUI, _super);
    function MainUI() {
        var _this = _super.call(this) || this;
        _this.m_isShowMultiBtns = true;
        _this.m_isShowAllLevels = false;
        _this.CurrentLabelType = BIMManager_1.LabelType.Usage;
        _this.m_orgLevel1 = new Laya.WeakObject();
        _this.m_orgLevel2 = new Laya.WeakObject();
        _this.m_level1arrs = new Array();
        _this.m_level2arrs = new Array();
        _this.uitree = new UITree_1.default();
        _this.treedata = new Array();
        return _this;
    }
    MainUI.prototype.onEnable = function () {
        var _this = this;
        MainUI._instance = this;
        this.UIAdapter();
        this.AddEvent();
        this.m_is2D = false;
        this.m_levelBtns = new Array();
        this.m_levelPos = new Laya.WeakObject();
        Laya.stage.on(Laya.Event.RESIZE, Laya.stage, function () {
            _this.UIAdapter();
        });
    };
    MainUI.prototype.UIAdapter = function () {
        var _this = this;
        var width = Laya.stage.width;
        var height = Laya.stage.height;
        this.width = width;
        this.height = height;
        this._2D3DBtn.pos(100, height - 100);
        this.DepBtn.pos(100, height / 3);
        this.UsageBtn.pos(100, height / 3 + 150);
        this.AreaBtn.pos(100, height / 3 + 300);
        this.MultiBtn.pos(width - 150, height - 180);
        this.AllBtn.pos(width - 150, height - 100);
        //重新刷新levelbtn
        if (this.m_levelBtns && this.m_levelBtns.length != 0) {
            var index_1 = 0;
            this.m_levelBtns.forEach(function (element) {
                _this.m_levelBtnOriPos = new Laya.Vector2(_this.MultiBtn.x, _this.MultiBtn.y);
                element.pos(_this.MultiBtn.x, _this.MultiBtn.y - ++index_1 * 80);
                if (_this.m_levelPos.has(element)) {
                    _this.m_levelPos.del(element);
                    _this.m_levelPos.set(element, new Laya.Vector2(element.x, element.y));
                }
            });
        }
    };
    //应该有RemoveEvenet
    MainUI.prototype.AddEvent = function () {
        var _this = this;
        this._2D3DBtn.on(Laya.Event.CLICK, null, function (e) {
            _this._2D3DBtnClicked();
            e.stopPropagation();
        });
        this.DepBtn.on(Laya.Event.CLICK, null, function (e) {
            GameManager_1.default.Instance().BIM.RefreshLabelContent(BIMManager_1.LabelType.Depart);
            _this.CurrentLabelType = BIMManager_1.LabelType.Depart;
            e.stopPropagation();
        });
        this.UsageBtn.on(Laya.Event.CLICK, null, function (e) {
            GameManager_1.default.Instance().BIM.RefreshLabelContent(BIMManager_1.LabelType.Usage);
            _this.CurrentLabelType = BIMManager_1.LabelType.Usage;
            e.stopPropagation();
        });
        this.AreaBtn.on(Laya.Event.CLICK, null, function (e) {
            GameManager_1.default.Instance().BIM.RefreshLabelContent(BIMManager_1.LabelType.Area);
            e.stopPropagation();
        });
        this.MultiBtn.on(Laya.Event.CLICK, null, function (e) {
            _this.ShowLevels(_this.m_isShowMultiBtns);
            e.stopPropagation();
        });
        this.AllBtn.on(Laya.Event.CLICK, null, function (e) {
            _this.m_isShowAllLevels = !_this.m_isShowAllLevels;
            GameManager_1.default.Instance().BIM.ShowAllLevels(_this.m_isShowAllLevels);
            e.stopPropagation();
        });
    };
    MainUI.prototype.CreateLevels = function (levels) {
        var _this = this;
        if (levels == null || levels.length == 0)
            return;
        this.m_levelBtns.splice(0);
        var underGroundLevel = new Array();
        var upGroundLevel = new Array();
        levels.forEach(function (element) {
            if (element.length != 15) {
                console.debug("level name is not legal!");
                return;
            }
            if (Common_1.default.GetPurLevel(element).match("B") != null) {
                underGroundLevel.push(element);
            }
            else {
                upGroundLevel.push(element);
            }
        });
        underGroundLevel.sort(function (a, b) {
            return a.charAt(14) > b.charAt(14) ? -1 : 1;
        });
        upGroundLevel.sort(function (a, b) {
            return a.charAt(14) > b.charAt(14) ? 1 : -1;
        });
        var realLevels = underGroundLevel.concat(upGroundLevel);
        //temp
        var index = 0;
        this.m_levelBtnOriPos = new Laya.Vector2(this.MultiBtn.x, this.MultiBtn.y);
        realLevels.forEach(function (element) {
            _this.CreateOneButton(element, new Laya.Vector2(_this.m_levelBtnOriPos.x, _this.m_levelBtnOriPos.y - ++index * 80));
        });
    };
    MainUI.prototype.CreateOneButton = function (levelCode, pos) {
        if (levelCode == null)
            return;
        var purLevel = Common_1.default.GetPurLevel(levelCode);
        var lvlBtn = new Button("comp/button.png");
        lvlBtn.name = levelCode;
        lvlBtn.width = 80;
        lvlBtn.height = 60;
        lvlBtn.pos(pos.x, pos.y);
        lvlBtn.labelSize = 30;
        lvlBtn.label = purLevel.charAt(0) + purLevel.charAt(3);
        lvlBtn.on(Laya.Event.CLICK, null, function (e, lvlName) {
            e.stopPropagation();
            EventManager_1.default.Instance().PostEvent(Events_1.Events.OnUI_LevelBtn_Clicked.toString(), lvlBtn.name);
        });
        Laya.stage.addChild(lvlBtn);
        this.m_levelBtns.push(lvlBtn);
        this.m_levelPos.set(lvlBtn, new Laya.Vector2(lvlBtn.x, lvlBtn.y));
    };
    MainUI.prototype.ShowLevels = function (b) {
        var _this = this;
        this.m_isShowMultiBtns = !b;
        if (!this.m_isShowMultiBtns) {
            this.MultiBtn.label = "展开";
            this.m_levelBtns.forEach(function (element) {
                Laya.Tween.to(element, { x: _this.m_levelBtnOriPos.x, y: _this.m_levelBtnOriPos.y }, 50, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                    element.visible = _this.m_isShowMultiBtns;
                }));
            });
        }
        else {
            this.MultiBtn.label = "折叠";
            this.m_levelBtns.forEach(function (element) {
                element.visible = _this.m_isShowMultiBtns;
                var pos = _this.m_levelPos.get(element);
                Laya.Tween.to(element, { x: pos.x, y: pos.y }, 50);
            });
        }
    };
    MainUI.prototype._2D3DBtnClicked = function () {
        this.m_is2D = !this.m_is2D;
        GameManager_1.default.Instance().Camera.ResetCamera(this.m_is2D);
        if (this.m_is2D) {
            this._2D3DBtn.label = "3D";
        }
        else {
            this._2D3DBtn.label = "2D";
        }
    };
    MainUI.prototype.CreateTree = function (orgs) {
        //TEMP:默认为3级
        var _this = this;
        this.cleardic();
        var level1;
        var level2;
        var level3;
        orgs.forEach(function (element) {
            switch (element.length) {
                case 2:
                    if (!_this.m_orgLevel1.has(element)) {
                        _this.m_orgLevel1.set(element, new Array());
                        _this.m_level1arrs.push(element);
                    }
                    break;
                case 4:
                    level1 = element.substr(0, 2);
                    level2 = element.substr(0, 4);
                    if (!_this.m_orgLevel1.has(level1)) {
                        _this.m_orgLevel1.set(level1, new Array());
                        _this.m_level1arrs.push(level1);
                    }
                    var b = _this.m_orgLevel1.get(level1).some(function (code) { return code == level2; });
                    if (!b)
                        _this.m_orgLevel1.get(level1).push(level2);
                    break;
                case 6:
                    level1 = element.substr(0, 2);
                    level2 = element.substr(0, 4);
                    level3 = element.substr(0, 6);
                    if (!_this.m_orgLevel1.has(level1)) {
                        _this.m_orgLevel1.set(level1, new Array());
                        _this.m_level1arrs.push(level1);
                    }
                    var b2 = _this.m_orgLevel1.get(level1).some(function (code) { return code == level2; });
                    if (!b2)
                        _this.m_orgLevel1.get(level1).push(level2);
                    if (!_this.m_orgLevel2.has(level2)) {
                        _this.m_orgLevel2.set(level2, new Array());
                        _this.m_level2arrs.push(level2);
                    }
                    var b3 = _this.m_orgLevel2.get(level2).some(function (code) { return code == level3; });
                    if (!b3)
                        _this.m_orgLevel2.get(level2).push(level3);
                    break;
            }
        });
        this.m_level1arrs.forEach(function (lvl1) {
            var root = _this.createTreeItem(lvl1, GameManager_1.default.Instance().Data.GetOneOrganizationName(lvl1), 1, false, null);
            _this.treedata.push(root);
            _this.m_orgLevel1.get(lvl1).forEach(function (lvl2) {
                var isleaf = (!_this.m_orgLevel2.has(lvl2) || _this.m_orgLevel2.get(lvl2).length == 0) ? true : false;
                var level2 = _this.createTreeItem(lvl2, GameManager_1.default.Instance().Data.GetOneOrganizationName(lvl2), 2, isleaf, lvl1);
                root.children.push(level2);
                if (_this.m_orgLevel2.has(lvl2)) {
                    _this.m_orgLevel2.get(lvl2).forEach(function (lvl3) {
                        var level3 = _this.createTreeItem(lvl3, GameManager_1.default.Instance().Data.GetOneOrganizationName(lvl3), 3, true, lvl2);
                        level2.children.push(level3);
                    });
                }
            });
        });
        this.uitree.InitTree(this.treedata, null, new Laya.Vector2(Laya.Browser.width - 500, 10), "#FFD700");
        this.uitree.OnValueChanged = function (data, b) {
            _this.OnValueChanged(data, b);
        };
    };
    MainUI.prototype.createTreeItem = function (code, name, level, isLeaf, parentCode) {
        var item = new UITreeItem_1.TreeItemData();
        item.code = code;
        item.name = name;
        item.level = level;
        item.isLeaf = isLeaf;
        item.parentCode = parentCode;
        item.children = new Array();
        return item;
    };
    MainUI.prototype.OnValueChanged = function (arr, b) {
        var str = new Array();
        arr.forEach(function (element) {
            str.push(element.ItemData.code);
        });
        EventManager_1.default.Instance().PostEvent(Events_1.Events.OnDepTreeItemClicked.toString(), [str, b]);
    };
    MainUI.prototype.cleardic = function () {
        var _this = this;
        this.m_level1arrs.forEach(function (element) {
            _this.m_orgLevel1.del(element);
        });
        this.m_level1arrs.splice(0);
        this.m_level2arrs.forEach(function (element) {
            _this.m_orgLevel2.del(element);
        });
        this.m_level2arrs.splice(0);
        this.treedata.splice(0);
    };
    MainUI._instance = null;
    return MainUI;
}(layaMaxUI_1.ui.MainScene.MainSceneUI));
exports.default = MainUI;
},{"./../ui/layaMaxUI":26,"./BIM/BIMManager":3,"./Common/Common":5,"./Events/EventManager":16,"./Events/Events":17,"./GameManager":18,"./UI/Tree/UITree":24,"./UI/Tree/UITreeItem":25}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MtProtocalCommon_1 = require("./MtProtocalCommon");
var MtHttp = /** @class */ (function () {
    function MtHttp(ip, port) {
        this.m_ip = ip;
        this.m_port = port;
        this.URL = "http://" + this.m_ip + ":" + this.m_port;
        this.m_http = new Laya.HttpRequest;
        this.m_protocalCommon = new MtProtocalCommon_1.default();
    }
    MtHttp.prototype.get = function (url, caller, callback) {
        this.m_caller = caller;
        this.m_callback = callback;
        this.m_http.once(Laya.Event.COMPLETE, this, this.onHttpRequestComplete);
        this.m_http.once(Laya.Event.ERROR, this, this.onHttpRequestError);
        this.m_http.send(url, null, 'get', 'text');
        return this;
    };
    MtHttp.prototype.post = function (url, data, caller, callback) {
        this.m_caller = caller;
        this.m_callback = callback;
        this.m_http.once(Laya.Event.COMPLETE, this, this.onHttpRequestComplete);
        this.m_http.once(Laya.Event.ERROR, this, this.onHttpRequestError);
        this.m_http.send(url, data, 'post', 'json', this.m_protocalCommon.CommonHeader);
        return this;
    };
    MtHttp.prototype.onHttpRequestError = function (e) {
        this.m_callback.apply(this.m_caller, [{ state: "failed", msg: e }]);
    };
    MtHttp.prototype.onHttpRequestComplete = function (e) {
        this.m_callback.apply(this.m_caller, [{ state: "succeed", data: this.m_http.data }]);
    };
    return MtHttp;
}());
exports.default = MtHttp;
},{"./MtProtocalCommon":22}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//协议--请求头文件
var ProtocolCommon = /** @class */ (function () {
    function ProtocolCommon() {
        this.AccessControlAllowOrigin = "Access-Control-Allow-Origin";
        this.AccessControlAllowOriginValue = "*";
        this.AccessControlAllowHeaders = "Access-Control-Allow-Headers";
        this.AccessControlAllowHeadersValue = "Content-Type,Content-Length, Authorization, Accept,X-Requested-With";
        this.AccessControlAllowMethods = "Access-Control-Allow-Methods";
        this.AccessControlAllowMethodsValue = "POST, GET, OPTIONS,DELETE,PUT";
        this.XAuthTokenField = "X-Auth-Token";
        this.XAuthTokenFieldValue = "open-sesame";
        this.AcceptField = "Accept";
        this.ContentTypeFieldValue = "application/json";
        this.ContentTypeField = "Content-Type";
        this.TokenField = "cookie";
        this.CommonHeader = new Array();
        this.CommonHeader.push(this.AccessControlAllowOrigin, this.AccessControlAllowOriginValue);
        this.CommonHeader.push(this.AccessControlAllowHeaders, this.AccessControlAllowHeadersValue);
        this.CommonHeader.push(this.AccessControlAllowMethods, this.AccessControlAllowMethodsValue);
        this.CommonHeader.push(this.XAuthTokenField, this.XAuthTokenFieldValue);
        this.CommonHeader.push(this.AcceptField, this.ContentTypeFieldValue);
        this.CommonHeader.push(this.ContentTypeField, this.ContentTypeFieldValue);
    }
    ProtocolCommon.prototype.SetCookies = function (cookie) {
        cookie = cookie;
    };
    return ProtocolCommon;
}());
exports.default = ProtocolCommon;
},{}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Handler = laya.utils.Handler;
var GameUI_1 = require("../GameUI");
var ResManager = /** @class */ (function () {
    function ResManager() {
        this.ResNames = new Array();
        this.ResEnitityDic = new Laya.WeakObject();
    }
    ResManager.Instance = function () {
        if (ResManager._instance == null) {
            ResManager._instance = new ResManager();
        }
        return ResManager._instance;
    };
    //加载多个资源
    ResManager.prototype.LoadPrefabAssets = function (resNames, finished) {
        var _this = this;
        if (resNames == null || resNames.length == 0)
            return;
        this.ResNames = resNames;
        Laya.loader.create(resNames, Handler.create(this, function () {
            _this.ResNames.forEach(function (element) {
                var res = Laya.loader.getRes(element.url);
                if (!_this.ResEnitityDic.has(element.url)) {
                    _this.ResEnitityDic.set(element.url, res);
                }
                if (finished != null) {
                    var params = [element.url, res];
                    finished.runWith(params);
                }
            });
        }), Handler.create(this, function (p) {
            _this.SetLoadPercent(p);
        }));
    };
    ResManager.prototype.GetOneAsset = function (url) {
        if (url == null)
            return null;
        if (this.ResEnitityDic.has(url)) {
            return this.ResEnitityDic.get(url);
        }
        else {
            return null;
        }
    };
    ResManager.prototype.ReleaseOneAsset = function (url) {
        if (url == null)
            return;
        var res = this.GetOneAsset(url);
        if (res != null) {
            //待测试，是否释放了内存
            res.destroy(true);
        }
    };
    //待测试
    ResManager.prototype.ReleaseAllAssets = function () {
        var _this = this;
        if (this.ResEnitityDic != null) {
            this.ResNames.forEach(function (element) {
                if (_this.ResEnitityDic.has(element)) {
                    _this.ResEnitityDic.get(element).destroy(true);
                }
            });
        }
    };
    ResManager.prototype.SetLoadPercent = function (p) {
        GameUI_1.default._instance.SetLoadPercent(p);
    };
    return ResManager;
}());
exports.default = ResManager;
},{"../GameUI":19}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UITreeItem_1 = require("./UITreeItem");
var Handler = Laya.Handler;
/**
 * 创建简易树
 */
var UITree = /** @class */ (function () {
    function UITree() {
        this.m_ItemCodes = new Array();
        this.m_treeItemsDic = new Laya.WeakObject();
        this.m_valueChangedItem = new Array();
    }
    UITree.prototype.InitTree = function (items, style, treePos, treeBgColor, uitreeAtlas) {
        var _this = this;
        if (items == null || items.length == 0)
            return;
        var defaultPath = "res/atlas/tree.atlas";
        var _uitreeAtlas = uitreeAtlas == null ? defaultPath : uitreeAtlas;
        Laya.loader.load(_uitreeAtlas, Handler.create(this, function () {
            _this.ClearTreeItemDic();
            if (_this.m_tree == null) {
                //Temp，用VBox制作一个Tree
                _this.m_tree = new Laya.VBox();
                _this.m_tree.x = treePos == null ? 0 : treePos.x;
                _this.m_tree.y = treePos == null ? 0 : treePos.y;
                _this.m_tree.bgColor = treeBgColor == null ? "#ffffff" : treeBgColor;
                Laya.stage.addChild(_this.m_tree);
            }
            if (treeBgColor != null) {
                if (style == null)
                    style = new UITreeItem_1.TreeItemStyle();
                style.ItemColor = treeBgColor;
            }
            items.forEach(function (element) {
                _this.AddItem(element, style);
            });
            _this.RefreshItemPosition();
        }));
    };
    UITree.prototype.AddItem = function (item, style) {
        var _this = this;
        if (item == null)
            return;
        var treeItem = new UITreeItem_1.default();
        treeItem.InitTreeItem(item, style);
        treeItem.OnArrowClick = (function (item, b) { _this.OnArrowClicked(item, b); });
        treeItem.OnCheckBoxClick = (function (item, b) { _this.OnCheckBoxClicked(item, b); });
        this.m_ItemCodes.push(item.code);
        if (!this.m_treeItemsDic.has(item.code))
            this.m_treeItemsDic.set(item.code, treeItem);
        this.m_tree.addChild(treeItem.TreeItem);
        if (!item.isLeaf) {
            item.children.forEach(function (element) {
                _this.AddItem(element, style);
            });
        }
    };
    UITree.prototype.OnArrowClicked = function (item, b) {
        if (item == null)
            return;
        this.RefreshArrowStatus(item.ItemData.code, b);
        this.RefreshItemPosition();
    };
    UITree.prototype.OnCheckBoxClicked = function (item, b) {
        if (item == null)
            return;
        this.m_valueChangedItem.splice(0);
        if (!item.ItemData.isLeaf)
            this.RefreshCheckStatusByParent(item.ItemData, b);
        else
            this.m_valueChangedItem.push(item);
        this.RefreshCheckStatusByChildren(item.ItemData);
        if (this.OnValueChanged)
            this.OnValueChanged(this.m_valueChangedItem, b);
    };
    UITree.prototype.RefreshCheckStatusByParent = function (data, b) {
        var _this = this;
        if (data == null || !this.m_treeItemsDic.has(data.code))
            return;
        var treeItem = this.m_treeItemsDic.get(data.code);
        if (treeItem.ItemData.children != null) {
            treeItem.ItemData.children.forEach(function (element) {
                if (_this.m_treeItemsDic.has(element.code)) {
                    var child = _this.m_treeItemsDic.get(element.code);
                    child.SetCheckboxStatus(b ? UITreeItem_1.CheckStatus.check : UITreeItem_1.CheckStatus.uncheck);
                    if (child.ItemData.isLeaf)
                        _this.m_valueChangedItem.push(child);
                    _this.RefreshCheckStatusByParent(child.ItemData, b);
                }
            });
        }
    };
    UITree.prototype.RefreshCheckStatusByChildren = function (data) {
        if (data.level == 1)
            return;
        var check = 0;
        var partly = 0;
        var parent = this.m_treeItemsDic.has(data.parentCode) ? this.m_treeItemsDic.get(data.parentCode) : null;
        if (parent) {
            parent.ItemData.children.forEach(function (element) {
                switch (element.status) {
                    case UITreeItem_1.CheckStatus.check:
                        check++;
                        break;
                    case UITreeItem_1.CheckStatus.partly:
                        partly++;
                        break;
                }
            });
            if (partly > 0) {
                parent.SetCheckboxStatus(UITreeItem_1.CheckStatus.partly);
            }
            else {
                if (check == 0) {
                    parent.SetCheckboxStatus(UITreeItem_1.CheckStatus.uncheck);
                    this.RefreshCheckStatusByChildren(parent.ItemData);
                }
                else if (check == parent.ItemData.children.length) {
                    parent.SetCheckboxStatus(UITreeItem_1.CheckStatus.check);
                    this.RefreshCheckStatusByChildren(parent.ItemData);
                }
                else {
                    parent.SetCheckboxStatus(UITreeItem_1.CheckStatus.partly);
                }
            }
        }
    };
    UITree.prototype.RefreshArrowStatus = function (code, b) {
        var _this = this;
        if (code == null || !this.m_treeItemsDic.has(code))
            return;
        var treeItem = this.m_treeItemsDic.get(code);
        treeItem.ItemData.children.forEach(function (element) {
            if (_this.m_treeItemsDic.has(element.code)) {
                var child = _this.m_treeItemsDic.get(element.code);
                child.TreeItem.visible = b;
                if (!b && !child.ItemData.isLeaf) {
                    _this.RefreshArrowStatus(child.ItemData.code, b);
                    child.SetArrowStatus(b);
                }
            }
        });
    };
    UITree.prototype.RefreshItemPosition = function () {
        var _this = this;
        var treelist = new Array();
        treelist.splice(0);
        this.m_ItemCodes.forEach(function (element) {
            var item = _this.m_treeItemsDic.get(element);
            if (item.TreeItem.visible) {
                treelist.push(item);
            }
        });
        var treeItemHeight = treelist[0].TreeItem.height;
        for (var i = 0; i < treelist.length; i++) {
            treelist[i].TreeItem.y = i * treeItemHeight;
        }
        this.m_tree.height = treelist.length * treeItemHeight;
    };
    UITree.prototype.ClearTreeItemDic = function () {
        var _this = this;
        this.m_ItemCodes.forEach(function (element) {
            if (_this.m_treeItemsDic.has(element)) {
                var item = _this.m_treeItemsDic.get(element);
                item.TreeItem.destroy();
                _this.m_treeItemsDic.del(element);
            }
        });
        this.m_ItemCodes.splice(0);
    };
    return UITree;
}());
exports.default = UITree;
},{"./UITreeItem":25}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TreeItemData = /** @class */ (function () {
    function TreeItemData() {
    }
    return TreeItemData;
}());
exports.TreeItemData = TreeItemData;
var TreeItemStyle = /** @class */ (function () {
    function TreeItemStyle() {
    }
    return TreeItemStyle;
}());
exports.TreeItemStyle = TreeItemStyle;
var TreeStyle;
(function (TreeStyle) {
    TreeStyle[TreeStyle["Normal"] = 0] = "Normal";
    TreeStyle[TreeStyle["Legend"] = 1] = "Legend";
})(TreeStyle = exports.TreeStyle || (exports.TreeStyle = {}));
var CheckStatus;
(function (CheckStatus) {
    CheckStatus[CheckStatus["check"] = 0] = "check";
    CheckStatus[CheckStatus["partly"] = 1] = "partly";
    CheckStatus[CheckStatus["uncheck"] = 2] = "uncheck";
})(CheckStatus = exports.CheckStatus || (exports.CheckStatus = {}));
var UITreeItem = /** @class */ (function () {
    function UITreeItem() {
        this.m_treeItemWidth = 300;
        this.m_treeItemHeight = 50;
        this.m_treeItemIntentLevel = 30;
        this.m_treeItemInnerSpace = 10;
        this.m_treeItemBgColor = "#ffffff";
        this.m_labelColor = "#000000";
        this.m_fontsize = 30;
        this.m_align = "left";
    }
    /** *******************Public Methods*************************************************/
    UITreeItem.prototype.InitTreeItem = function (data, itemStyle) {
        if (data == null)
            return;
        this.ItemData = data;
        this.SetTreeItemStyle(itemStyle);
        this.CreateArrow();
        this.CreateCheckBox();
        this.CreateLabel();
        this.CreateHBox();
    };
    UITreeItem.prototype.SetTreeItemStyle = function (style) {
        if (style == null)
            return;
        this.m_treeItemWidth = style.ItemWidth == null ? this.m_treeItemWidth : style.ItemWidth;
        this.m_treeItemHeight = style.ItemHeigth == null ? this.m_treeItemHeight : style.ItemHeigth;
        this.m_treeItemIntentLevel = style.ItemIntentLevel == null ? this.m_treeItemIntentLevel : style.ItemIntentLevel;
        this.m_treeItemInnerSpace = style.ItemInnerSpace == null ? this.m_treeItemInnerSpace : style.ItemInnerSpace;
        this.m_treeItemBgColor = style.ItemColor == null ? this.m_treeItemBgColor : style.ItemColor;
        this.m_labelColor = style.LabelColor == null ? this.m_labelColor : style.LabelColor;
        this.m_fontsize = style.LabelFontsize == null ? this.m_fontsize : style.LabelFontsize;
        this.m_align = style.LabelAlign == null ? this.m_align : style.LabelAlign;
    };
    UITreeItem.prototype.SetArrowStatus = function (b) {
        this.ItemData.arrowStatus = b;
        if (this.ItemData.arrowStatus) {
            this.Arrow.index = 1;
        }
        else {
            this.Arrow.index = 0;
        }
    };
    UITreeItem.prototype.SetCheckboxStatus = function (status) {
        switch (status) {
            case CheckStatus.check:
                this.CheckBox.index = 2;
                this.ItemData.status = CheckStatus.check;
                break;
            case CheckStatus.partly:
                this.CheckBox.index = 1;
                this.ItemData.status = CheckStatus.partly;
                break;
            case CheckStatus.uncheck:
                this.CheckBox.index = 0;
                this.ItemData.status = CheckStatus.uncheck;
                break;
        }
    };
    UITreeItem.prototype.SetContent = function (content) {
        this.Label.text = content;
    };
    /****************************TreeItem**************************************************/
    UITreeItem.prototype.CreateHBox = function (intentLevel) {
        this.TreeItem = new Laya.HBox();
        this.TreeItem.name = "treeItem";
        this.TreeItem.x = 5;
        this.TreeItem.width = this.m_treeItemWidth;
        this.TreeItem.height = this.m_treeItemHeight;
        this.TreeItem.space = this.m_treeItemInnerSpace;
        if (this.m_treeItemBgColor.length > 7) {
            this.m_treeItemBgColor = this.m_treeItemBgColor.substr(0, 7) + "00";
        }
        this.TreeItem.bgColor = this.m_treeItemBgColor;
        this.TreeItem.x = this.m_treeItemIntentLevel * (this.ItemData.level - 1);
        this.TreeItem.addChild(this.Arrow);
        this.TreeItem.addChild(this.CheckBox);
        this.TreeItem.addChild(this.Label);
        Laya.stage.addChild(this.TreeItem);
    };
    /** ***********************arrow*******************************************************/
    UITreeItem.prototype.CreateArrow = function () {
        var _this = this;
        var arrowRes = "tree/arrow.png";
        this.Arrow = new Laya.Clip(arrowRes, 1, 2);
        this.Arrow.width = this.m_treeItemHeight > 20 ? this.m_treeItemHeight - 20 : this.m_treeItemHeight;
        this.Arrow.height = this.m_treeItemHeight > 20 ? this.m_treeItemHeight - 20 : this.m_treeItemHeight;
        this.Arrow.y = this.m_treeItemHeight > 20 ? 10 : 0;
        this.Arrow.clipY = 2;
        this.Arrow.name = "arrow";
        if (this.ItemData.isLeaf)
            this.Arrow.visible = false;
        this.SetArrowStatus(true);
        this.Arrow.on(Laya.Event.CLICK, this, function (e) {
            e.stopPropagation();
            _this.ItemData.arrowStatus = !_this.ItemData.arrowStatus;
            _this.SetArrowStatus(_this.ItemData.arrowStatus);
            if (_this.OnArrowClick)
                _this.OnArrowClick(_this, _this.ItemData.arrowStatus);
        });
        Laya.stage.addChild(this.Arrow);
    };
    /******************CheckBox************************************************************/
    UITreeItem.prototype.CreateCheckBox = function () {
        var _this = this;
        this.CheckBox = new Laya.Clip("tree/checkbox.png", 1, 2);
        this.CheckBox.width = this.m_treeItemHeight > 20 ? this.m_treeItemHeight - 20 : this.m_treeItemHeight;
        this.CheckBox.height = this.m_treeItemHeight > 20 ? this.m_treeItemHeight - 20 : this.m_treeItemHeight;
        this.CheckBox.y = this.m_treeItemHeight > 20 ? 10 : 0;
        this.CheckBox.clipY = 3;
        this.CheckBox.name = "checkbox";
        this.SetCheckboxStatus(CheckStatus.check); //默认全选
        this.CheckBox.on(Laya.Event.CLICK, this, function (e) {
            e.stopPropagation();
            var b = _this.ItemData.status == CheckStatus.uncheck ? false : true;
            _this.SetCheckboxStatus(!b ? CheckStatus.check : CheckStatus.uncheck);
            if (_this.OnCheckBoxClick)
                _this.OnCheckBoxClick(_this, !b);
        });
        Laya.stage.addChild(this.CheckBox);
    };
    /****************Label*****************************************************************/
    UITreeItem.prototype.CreateLabel = function () {
        this.Label = new Laya.Label();
        this.Label.name = "label";
        this.Label.height = this.m_treeItemHeight;
        this.Label.align = this.m_align;
        this.Label.valign = "middle";
        this.Label.fontSize = this.m_fontsize;
        this.Label.color = this.m_labelColor;
        this.SetContent(this.ItemData.name);
        Laya.stage.addChild(this.Label);
    };
    return UITreeItem;
}());
exports.default = UITreeItem;
},{}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var MainScene;
    (function (MainScene) {
        var MainSceneUI = /** @class */ (function (_super) {
            __extends(MainSceneUI, _super);
            function MainSceneUI() {
                return _super.call(this) || this;
            }
            MainSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(MainSceneUI.uiView);
            };
            MainSceneUI.uiView = { "type": "Scene", "props": { "width": 600, "height": 900 }, "compId": 2, "child": [{ "type": "Button", "props": { "y": 271, "x": 23, "width": 80, "var": "DepBtn", "skin": "comp/button.png", "labelSize": 30, "label": "科室", "height": 60 }, "compId": 7 }, { "type": "Button", "props": { "y": 355, "x": 23, "width": 80, "var": "UsageBtn", "skin": "comp/button.png", "labelSize": 30, "label": "用途", "height": 60 }, "compId": 8 }, { "type": "Button", "props": { "y": 437, "x": 23, "width": 80, "var": "AreaBtn", "skin": "comp/button.png", "labelSize": 30, "label": "面积", "height": 60 }, "compId": 9 }, { "type": "Button", "props": { "y": 600, "x": 476, "width": 80, "var": "MultiBtn", "skin": "comp/button.png", "labelSize": 30, "label": "折叠", "height": 60 }, "compId": 13 }, { "type": "Button", "props": { "y": 680, "x": 23, "width": 80, "var": "_2D3DBtn", "skin": "comp/button.png", "labelSize": 30, "label": "2D", "height": 60 }, "compId": 14 }, { "type": "Button", "props": { "y": 680, "x": 476, "width": 80, "var": "AllBtn", "skin": "comp/button.png", "labelSize": 30, "label": "全部", "height": 60 }, "compId": 26 }], "loadList": ["comp/button.png"], "loadList3D": [] };
            return MainSceneUI;
        }(Scene));
        MainScene.MainSceneUI = MainSceneUI;
        REG("ui.MainScene.MainSceneUI", MainSceneUI);
    })(MainScene = ui.MainScene || (ui.MainScene = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var portal;
    (function (portal) {
        var LoadingUI = /** @class */ (function (_super) {
            __extends(LoadingUI, _super);
            function LoadingUI() {
                return _super.call(this) || this;
            }
            LoadingUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("portal/Loading");
            };
            return LoadingUI;
        }(Scene));
        portal.LoadingUI = LoadingUI;
        REG("ui.portal.LoadingUI", LoadingUI);
    })(portal = ui.portal || (ui.portal = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
